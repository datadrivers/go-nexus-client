openapi: 3.0.1
info:
  title: Nexus Repository Manager REST API
  version: 3.29.0-02
servers:
- url: /service/rest/
tags:
- name: 'Security Management: Anonymous Access'
- name: Security management
- name: 'Security management: users'
- name: 'Security management: privileges'
- name: 'Security management: realms'
- name: 'Security management: roles'
- name: Tasks
- name: Blob store
- name: Lifecycle
- name: Read-only
- name: 'Security: certificates'
- name: Assets
- name: Components
- name: Repository Management
- name: Content selectors
- name: Repositories
- name: Routing rules
- name: Search
- name: Formats
- name: Script
- name: Email
- name: Status
- name: Support
- name: 'Security management: LDAP'
- name: Product licensing
- name: Manage IQ server configuration
paths:
  /v1/security/anonymous:
    get:
      tags:
      - 'Security Management: Anonymous Access'
      summary: Get Anonymous Access settings
      operationId: read
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnonymousAccessSettingsXO'
        "403":
          description: Insufficient permissions to update settings
          content: {}
    put:
      tags:
      - 'Security Management: Anonymous Access'
      summary: Update Anonymous Access settings
      operationId: update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnonymousAccessSettingsXO'
        required: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnonymousAccessSettingsXO'
        "403":
          description: Insufficient permissions to update settings
          content: {}
      x-codegen-request-body-name: body
  /v1/security/user-sources:
    get:
      tags:
      - Security management
      summary: Retrieve a list of the available user sources.
      operationId: getUserSources
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiUserSource'
                x-content-type: application/json
        "403":
          description: The user does not have permission to perform the operation.
          content: {}
  /v1/security/users/{userId}:
    put:
      tags:
      - 'Security management: users'
      summary: Update an existing user.
      operationId: updateUser
      parameters:
      - name: userId
        in: path
        description: The userid the request should apply to.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: A representation of the user to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiUser'
        required: false
      responses:
        "400":
          description: Password was not supplied in the body of the request
          content: {}
        "403":
          description: The user does not have permission to perform the operation.
          content: {}
        "404":
          description: User or user source not found in the system.
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - 'Security management: users'
      summary: Delete a user.
      operationId: deleteUser
      parameters:
      - name: userId
        in: path
        description: The userid the request should apply to.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "400":
          description: There was problem deleting a user. Consult the response body
            for more details
          content: {}
        "403":
          description: The user does not have permission to perform the operation.
          content: {}
        "404":
          description: User or user source not found in the system.
          content: {}
  /v1/security/users/{userId}/change-password:
    put:
      tags:
      - 'Security management: users'
      summary: Change a user's password.
      operationId: changePassword
      parameters:
      - name: userId
        in: path
        description: The userid the request should apply to.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The new password to use.
        content:
          text/plain:
            schema:
              type: string
        required: false
      responses:
        "400":
          description: Password was not supplied in the body of the request
          content: {}
        "403":
          description: The user does not have permission to perform the operation.
          content: {}
        "404":
          description: User not found in the system.
          content: {}
      x-codegen-request-body-name: body
  /v1/security/users:
    get:
      tags:
      - 'Security management: users'
      summary: Retrieve a list of users. Note if the source is not 'default' the response
        is limited to 100 users.
      operationId: getUsers
      parameters:
      - name: userId
        in: query
        description: An optional term to search userids for.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: source
        in: query
        description: An optional user source to restrict the search to.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiUser'
                x-content-type: application/json
        "400":
          description: Password was not supplied in the body of the request
          content: {}
        "403":
          description: The user does not have permission to perform the operation.
          content: {}
    post:
      tags:
      - 'Security management: users'
      summary: Create a new user in the default source.
      operationId: createUser
      requestBody:
        description: A representation of the user to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiCreateUser'
        required: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiUser'
        "400":
          description: Password was not supplied in the body of the request
          content: {}
        "403":
          description: The user does not have permission to perform the operation.
          content: {}
      x-codegen-request-body-name: body
  /v1/security/privileges:
    get:
      tags:
      - 'Security management: privileges'
      summary: Retrieve a list of privileges.
      operationId: getPrivileges
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiPrivilege'
                x-content-type: application/json
        "403":
          description: The user does not have permission to perform the operation.
          content: {}
  /v1/security/privileges/{privilegeId}:
    get:
      tags:
      - 'Security management: privileges'
      summary: Retrieve a privilege by id.
      operationId: getPrivilege
      parameters:
      - name: privilegeId
        in: path
        description: The id of the privilege to retrieve.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiPrivilege'
        "403":
          description: The user does not have permission to perform the operation.
          content: {}
        "404":
          description: Privilege not found in the system.
          content: {}
    delete:
      tags:
      - 'Security management: privileges'
      summary: Delete a privilege by id.
      operationId: deletePrivilege
      parameters:
      - name: privilegeId
        in: path
        description: The id of the privilege to delete.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "400":
          description: The privilege is internal and may not be altered.
          content: {}
        "403":
          description: The user does not have permission to perform the operation.
          content: {}
        "404":
          description: Privilege not found in the system.
          content: {}
  /v1/security/privileges/wildcard:
    post:
      tags:
      - 'Security management: privileges'
      summary: Create a wildcard type privilege.
      operationId: createPrivilege
      requestBody:
        description: The privilege to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiPrivilegeWildcardRequest'
        required: false
      responses:
        "400":
          description: Privilege object not configured properly.
          content: {}
        "403":
          description: The user does not have permission to perform the operation.
          content: {}
      x-codegen-request-body-name: body
  /v1/security/privileges/application:
    post:
      tags:
      - 'Security management: privileges'
      summary: Create an application type privilege.
      operationId: createPrivilege_1
      requestBody:
        description: The privilege to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiPrivilegeApplicationRequest'
        required: false
      responses:
        "400":
          description: Privilege object not configured properly.
          content: {}
        "403":
          description: The user does not have permission to perform the operation.
          content: {}
      x-codegen-request-body-name: body
  /v1/security/privileges/wildcard/{privilegeId}:
    put:
      tags:
      - 'Security management: privileges'
      summary: Update a wildcard type privilege.
      operationId: updatePrivilege
      parameters:
      - name: privilegeId
        in: path
        description: The id of the privilege to update.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The privilege to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiPrivilegeWildcardRequest'
        required: false
      responses:
        "400":
          description: Privilege object not configured properly.
          content: {}
        "403":
          description: The user does not have permission to perform the operation.
          content: {}
        "404":
          description: Privilege not found in the system.
          content: {}
      x-codegen-request-body-name: body
  /v1/security/privileges/application/{privilegeId}:
    put:
      tags:
      - 'Security management: privileges'
      summary: Update an application type privilege.
      operationId: updatePrivilege_1
      parameters:
      - name: privilegeId
        in: path
        description: The id of the privilege to update.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The privilege to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiPrivilegeApplicationRequest'
        required: false
      responses:
        "400":
          description: Privilege object not configured properly.
          content: {}
        "403":
          description: The user does not have permission to perform the operation.
          content: {}
        "404":
          description: Privilege not found in the system.
          content: {}
      x-codegen-request-body-name: body
  /v1/security/realms/available:
    get:
      tags:
      - 'Security management: realms'
      summary: List the available realms
      operationId: getRealms
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RealmApiXO'
                x-content-type: application/json
  /v1/security/realms/active:
    get:
      tags:
      - 'Security management: realms'
      summary: List the active realm IDs in order
      operationId: getActiveRealms
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                x-content-type: application/json
    put:
      tags:
      - 'Security management: realms'
      summary: Set the active security realms in the order they should be used
      operationId: setActiveRealms
      requestBody:
        description: The realm IDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: false
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /v1/security/roles:
    get:
      tags:
      - 'Security management: roles'
      summary: List roles
      operationId: getRoles
      parameters:
      - name: source
        in: query
        description: The id of the user source to filter the roles by, if supplied.
          Otherwise roles from all user sources will be returned.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleXOResponse'
                x-content-type: application/json
        "400":
          description: The specified source does not exist
          content: {}
        "403":
          description: Insufficient permissions to read roles
          content: {}
    post:
      tags:
      - 'Security management: roles'
      summary: Create role
      operationId: create
      requestBody:
        description: A role configuration
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleXORequest'
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleXOResponse'
        "403":
          description: Insufficient permissions to create role
          content: {}
      x-codegen-request-body-name: body
  /v1/security/roles/{id}:
    get:
      tags:
      - 'Security management: roles'
      summary: Get role
      operationId: getRole
      parameters:
      - name: source
        in: query
        description: The id of the user source to filter the roles by. Available sources
          can be fetched using the 'User Sources' endpoint.
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: default
      - name: id
        in: path
        description: The id of the role to get
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleXOResponse'
        "400":
          description: The specified source does not exist
          content: {}
        "403":
          description: Insufficient permissions to read roles
          content: {}
        "404":
          description: Role not found
          content: {}
    put:
      tags:
      - 'Security management: roles'
      summary: Update role
      operationId: update_1
      parameters:
      - name: id
        in: path
        description: The id of the role to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: A role configuration
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleXORequest'
        required: true
      responses:
        "403":
          description: Insufficient permissions to update role
          content: {}
        "404":
          description: Role not found
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - 'Security management: roles'
      summary: Delete role
      operationId: delete
      parameters:
      - name: id
        in: path
        description: The id of the role to delete
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "403":
          description: Insufficient permissions to delete role
          content: {}
        "404":
          description: Role not found
          content: {}
  /v1/tasks/{id}:
    get:
      tags:
      - Tasks
      summary: Get a single task by id
      operationId: getTaskById
      parameters:
      - name: id
        in: path
        description: Id of the task to get
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskXO'
        "404":
          description: Task not found
          content: {}
  /v1/tasks:
    get:
      tags:
      - Tasks
      summary: List tasks
      operationId: getTasks
      parameters:
      - name: type
        in: query
        description: Type of the tasks to get
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageTaskXO'
  /v1/tasks/{id}/run:
    post:
      tags:
      - Tasks
      summary: Run task
      operationId: run
      parameters:
      - name: id
        in: path
        description: Id of the task to run
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Task was run
          content: {}
        "404":
          description: Task not found
          content: {}
        "405":
          description: Task is disabled
          content: {}
  /v1/tasks/{id}/stop:
    post:
      tags:
      - Tasks
      summary: Stop task
      operationId: stop
      parameters:
      - name: id
        in: path
        description: Id of the task to stop
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Task was stopped
          content: {}
        "404":
          description: Task not found
          content: {}
        "409":
          description: Unable to stop task
          content: {}
  /v1/blobstores/{name}:
    delete:
      tags:
      - Blob store
      summary: Delete a blob store by name
      operationId: deleteBlobStore
      parameters:
      - name: name
        in: path
        description: The name of the blob store to delete
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        default:
          description: successful operation
          content: {}
  /v1/blobstores/{name}/quota-status:
    get:
      tags:
      - Blob store
      summary: Get quota status for a given blob store
      operationId: quotaStatus
      parameters:
      - name: name
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlobStoreQuotaResultXO'
  /v1/blobstores:
    get:
      tags:
      - Blob store
      summary: List the blob stores
      operationId: listBlobStores
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GenericBlobStoreApiResponse'
                x-content-type: application/json
  /v1/blobstores/file:
    post:
      tags:
      - Blob store
      summary: Create a file blob store
      operationId: createFileBlobStore
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileBlobStoreApiCreateRequest'
        required: false
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /v1/blobstores/file/{name}:
    get:
      tags:
      - Blob store
      summary: Get a file blob store configuration by name
      operationId: getFileBlobStoreConfiguration
      parameters:
      - name: name
        in: path
        description: The name of the file blob store to read
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileBlobStoreApiModel'
    put:
      tags:
      - Blob store
      summary: Update a file blob store configuration by name
      operationId: updateFileBlobStore
      parameters:
      - name: name
        in: path
        description: The name of the file blob store to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileBlobStoreApiUpdateRequest'
        required: false
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /v1/lifecycle/phase:
    get:
      tags:
      - Lifecycle
      summary: Get current lifecycle phase
      operationId: getPhase
      responses:
        "200":
          description: successful operation
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
    put:
      tags:
      - Lifecycle
      summary: Move to new lifecycle phase
      operationId: setPhase
      requestBody:
        description: The phase to move to
        content:
          text/plain:
            schema:
              type: string
        required: false
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /v1/lifecycle/bounce:
    put:
      tags:
      - Lifecycle
      summary: Bounce lifecycle phase
      description: Re-runs all phases from the given phase to the current phase
      operationId: bounce
      requestBody:
        description: The phase to bounce
        content:
          text/plain:
            schema:
              type: string
        required: false
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /v1/read-only/freeze:
    post:
      tags:
      - Read-only
      summary: Enable read-only
      operationId: freeze
      responses:
        "204":
          description: System is now read-only
          content: {}
        "403":
          description: Authentication required
          content: {}
        "404":
          description: No change to read-only state
          content: {}
  /v1/read-only/force-release:
    post:
      tags:
      - Read-only
      summary: Forcibly release read-only
      description: 'Forcibly release read-only status, including System initiated
        tasks. Warning: may result in data loss.'
      operationId: forceRelease
      responses:
        "204":
          description: System is no longer read-only
          content: {}
        "403":
          description: Authentication required
          content: {}
        "404":
          description: No change to read-only state
          content: {}
  /v1/read-only:
    get:
      tags:
      - Read-only
      summary: Get read-only state
      operationId: get
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadOnlyState'
  /v1/read-only/release:
    post:
      tags:
      - Read-only
      summary: Release read-only
      description: Release administrator initiated read-only status. Will not release
        read-only caused by system tasks.
      operationId: release
      responses:
        "204":
          description: System is no longer read-only
          content: {}
        "403":
          description: Authentication required
          content: {}
        "404":
          description: No change to read-only state
          content: {}
  /v1/security/ssl/truststore:
    get:
      tags:
      - 'Security: certificates'
      summary: Retrieve a list of certificates added to the trust store.
      operationId: getTrustStoreCertificates
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiCertificate'
                x-content-type: application/json
        "403":
          description: Insufficient permissions to list certificates in the trust
            store.
          content: {}
    post:
      tags:
      - 'Security: certificates'
      summary: Add a certificate to the trust store.
      operationId: addCertificate
      requestBody:
        description: The certificate to add encoded in PEM format
        content:
          '*/*':
            schema:
              type: string
        required: false
      responses:
        "201":
          description: The certificate was successfully added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiCertificate'
        "403":
          description: Insufficient permissions to add certificate to the trust store.
          content: {}
        "409":
          description: The certificate already exists in the system.
          content: {}
      x-codegen-request-body-name: body
  /v1/security/ssl/truststore/{id}:
    delete:
      tags:
      - 'Security: certificates'
      summary: Remove a certificate in the trust store.
      operationId: removeCertificate
      parameters:
      - name: id
        in: path
        description: The id of the certificate that should be removed.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "403":
          description: Insufficient permissions to remove certificate from the trust
            store
          content: {}
  /v1/security/ssl:
    get:
      tags:
      - 'Security: certificates'
      summary: Helper method to retrieve certificate details from a remote system.
      operationId: retrieveCertificate
      parameters:
      - name: host
        in: query
        description: The remote system's host name
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: port
        in: query
        description: The port on the remote system to connect to
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 443
      - name: protocolHint
        in: query
        description: An optional hint of the protocol to try for the connection
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiCertificate'
        "400":
          description: A certificate could not be retrieved, see the message for details.
          content: {}
        "403":
          description: Insufficient permissions to retrieve remote certificate.
          content: {}
  /v1/assets/{id}:
    get:
      tags:
      - Assets
      summary: Get a single asset
      operationId: getAssetById
      parameters:
      - name: id
        in: path
        description: Id of the asset to get
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetXO'
        "403":
          description: Insufficient permissions to get asset
          content: {}
        "404":
          description: Asset not found
          content: {}
        "422":
          description: Malformed ID
          content: {}
    delete:
      tags:
      - Assets
      summary: Delete a single asset
      operationId: deleteAsset
      parameters:
      - name: id
        in: path
        description: Id of the asset to delete
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Asset was successfully deleted
          content: {}
        "403":
          description: Insufficient permissions to delete asset
          content: {}
        "404":
          description: Asset not found
          content: {}
        "422":
          description: Malformed ID
          content: {}
  /v1/assets:
    get:
      tags:
      - Assets
      summary: List assets
      operationId: getAssets
      parameters:
      - name: continuationToken
        in: query
        description: A token returned by a prior request. If present, the next page
          of results are returned
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repository
        in: query
        description: Repository from which you would like to retrieve assets.
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageAssetXO'
        "403":
          description: Insufficient permissions to list assets
          content: {}
        "422":
          description: Parameter 'repository' is required
          content: {}
  /v1/components:
    get:
      tags:
      - Components
      summary: List components
      operationId: getComponents
      parameters:
      - name: continuationToken
        in: query
        description: A token returned by a prior request. If present, the next page
          of results are returned
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repository
        in: query
        description: Repository from which you would like to retrieve components
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageComponentXO'
        "403":
          description: Insufficient permissions to list components
          content: {}
        "422":
          description: Parameter 'repository' is required
          content: {}
    post:
      tags:
      - Components
      summary: Upload a single component
      operationId: uploadComponent
      parameters:
      - name: repository
        in: query
        description: Name of the repository to which you would like to upload the
          component
        required: true
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body'
      responses:
        "403":
          description: Insufficient permissions to upload a component
          content: {}
        "422":
          description: Parameter 'repository' is required
          content: {}
  /v1/components/{id}:
    get:
      tags:
      - Components
      summary: Get a single component
      operationId: getComponentById
      parameters:
      - name: id
        in: path
        description: ID of the component to retrieve
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentXO'
        "403":
          description: Insufficient permissions to get component
          content: {}
        "404":
          description: Component not found
          content: {}
        "422":
          description: Malformed ID
          content: {}
    delete:
      tags:
      - Components
      summary: Delete a single component
      operationId: deleteComponent
      parameters:
      - name: id
        in: path
        description: ID of the component to delete
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Component was successfully deleted
          content: {}
        "403":
          description: Insufficient permissions to delete component
          content: {}
        "404":
          description: Component not found
          content: {}
        "422":
          description: Malformed ID
          content: {}
  /v1/repositories/{repositoryName}/invalidate-cache:
    post:
      tags:
      - Repository Management
      summary: Invalidate repository cache. Proxy or group repositories only.
      operationId: invalidateCache
      parameters:
      - name: repositoryName
        in: path
        description: Name of the repository to invalidate cache
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Repository cache invalidated
          content: {}
        "400":
          description: Repository is not of proxy or group type
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
        "404":
          description: Repository not found
          content: {}
  /v1/repositories/{repositoryName}:
    delete:
      tags:
      - Repository Management
      summary: Delete repository of any format
      operationId: deleteRepository
      parameters:
      - name: repositoryName
        in: path
        description: Name of the repository to delete
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Repository deleted
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
        "404":
          description: Repository not found
          content: {}
  /v1/repositories/{repositoryName}/rebuild-index:
    post:
      tags:
      - Repository Management
      summary: Schedule a 'Repair - Rebuild repository search' Task. Hosted or proxy
        repositories only.
      operationId: rebuildIndex
      parameters:
      - name: repositoryName
        in: path
        description: Name of the repository to rebuild index
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Repository search index rebuild has been scheduled
          content: {}
        "400":
          description: Repository is not of hosted or proxy type
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
        "404":
          description: Repository not found
          content: {}
  /v1/repositorySettings:
    get:
      tags:
      - Repository Management
      summary: List repositories
      operationId: getRepositories
      responses:
        "200":
          description: Repositories list returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AbstractApiRepository'
                x-content-type: application/json
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
  /v1/security/content-selectors:
    get:
      tags:
      - Content selectors
      summary: List content selectors
      operationId: getContentSelectors
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContentSelectorApiResponse'
                x-content-type: application/json
        "403":
          description: Insufficient permissions to read content selectors
          content: {}
    post:
      tags:
      - Content selectors
      summary: Create a new content selector
      operationId: createContentSelector
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContentSelectorApiCreateRequest'
        required: false
      responses:
        "204":
          description: Content selector successfully created
          content: {}
        "400":
          description: Invalid request
          content: {}
        "403":
          description: Insufficient permissions to create content selectors
          content: {}
      x-codegen-request-body-name: body
  /v1/security/content-selectors/{name}:
    get:
      tags:
      - Content selectors
      summary: Get a content selector by name
      operationId: getContentSelector
      parameters:
      - name: name
        in: path
        description: The content selector name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentSelectorApiResponse'
        "403":
          description: Insufficient permissions to read the content selector
          content: {}
    put:
      tags:
      - Content selectors
      summary: Update a content selector
      operationId: updateContentSelector
      parameters:
      - name: name
        in: path
        description: The content selector name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContentSelectorApiUpdateRequest'
        required: false
      responses:
        "204":
          description: Content selector updated successfully
          content: {}
        "400":
          description: Invalid request
          content: {}
        "403":
          description: Insufficient permissions to update the content selector
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - Content selectors
      summary: Delete a content selector
      operationId: deleteContentSelector
      parameters:
      - name: name
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Content selector deleted successfully
          content: {}
        "400":
          description: Invalid request
          content: {}
        "403":
          description: Insufficient permissions to delete the content selector
          content: {}
  /v1/repositories:
    get:
      tags:
      - Repositories
      summary: List repositories
      operationId: getRepositories_1
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RepositoryXO'
                x-content-type: application/json
  /v1/routing-rules/{name}:
    get:
      tags:
      - Routing rules
      summary: Get a single routing rule
      operationId: getRoutingRule
      parameters:
      - name: name
        in: path
        description: The name of the routing rule to get
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutingRuleXO'
        "403":
          description: Insufficient permissions to read routing rules
          content: {}
        "404":
          description: Routing rule not found
          content: {}
    put:
      tags:
      - Routing rules
      summary: Update a single routing rule
      operationId: updateRoutingRule
      parameters:
      - name: name
        in: path
        description: The name of the routing rule to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: A routing rule configuration
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoutingRuleXO'
        required: true
      responses:
        "204":
          description: Routing rule was successfully updated
          content: {}
        "400":
          description: Another routing rule with the same name already exists or required
            parameters missing
          content: {}
        "403":
          description: Insufficient permissions to edit routing rules
          content: {}
        "404":
          description: Routing rule not found
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - Routing rules
      summary: Delete a single routing rule
      operationId: deleteRoutingRule
      parameters:
      - name: name
        in: path
        description: The name of the routing rule to delete
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Routing rule was successfully deleted
          content: {}
        "403":
          description: Insufficient permissions to delete routing rules
          content: {}
        "404":
          description: Routing rule not found
          content: {}
  /v1/routing-rules:
    get:
      tags:
      - Routing rules
      summary: List routing rules
      operationId: getRoutingRules
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoutingRuleXO'
                x-content-type: application/json
        "403":
          description: Insufficient permissions to read routing rules
          content: {}
    post:
      tags:
      - Routing rules
      summary: Create a single routing rule
      operationId: createRoutingRule
      requestBody:
        description: A routing rule configuration
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoutingRuleXO'
        required: true
      responses:
        "204":
          description: Routing rule was successfully created
          content: {}
        "400":
          description: A routing rule with the same name already exists or required
            parameters missing
          content: {}
        "403":
          description: Insufficient permissions to create routing rule
          content: {}
      x-codegen-request-body-name: body
  /v1/search/assets:
    get:
      tags:
      - Search
      summary: Search assets
      operationId: searchAssets
      parameters:
      - name: continuationToken
        in: query
        description: A token returned by a prior request. If present, the next page
          of results are returned
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sort
        in: query
        description: The field to sort the results against, if left empty, a sort
          based on match weight will be used.
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          enum:
          - group
          - name
          - version
          - repository
      - name: direction
        in: query
        description: The direction to sort records in, defaults to ascending ('asc')
          for all sort fields, except version, which defaults to descending ('desc')
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          enum:
          - asc
          - desc
      - name: timeout
        in: query
        description: How long to wait for search results in seconds. If this value
          is not provided, the system default timeout will be used.
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: q
        in: query
        description: Query by keyword
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repository
        in: query
        description: Repository name
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: format
        in: query
        description: Query by format
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: group
        in: query
        description: Component group
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: name
        in: query
        description: Component name
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: version
        in: query
        description: Component version
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: md5
        in: query
        description: Specific MD5 hash of component's asset
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sha1
        in: query
        description: Specific SHA-1 hash of component's asset
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sha256
        in: query
        description: Specific SHA-256 hash of component's asset
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sha512
        in: query
        description: Specific SHA-512 hash of component's asset
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: prerelease
        in: query
        description: Prerelease version flag
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: conan.baseVersion
        in: query
        description: baseVersion
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: conan.channel
        in: query
        description: channel
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: docker.imageName
        in: query
        description: Docker image name
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: docker.imageTag
        in: query
        description: Docker image tag
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: docker.layerId
        in: query
        description: Docker layer ID
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: docker.contentDigest
        in: query
        description: Docker content digest
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: maven.groupId
        in: query
        description: Maven groupId
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: maven.artifactId
        in: query
        description: Maven artifactId
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: maven.baseVersion
        in: query
        description: Maven base version
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: maven.extension
        in: query
        description: Maven extension of component's asset
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: maven.classifier
        in: query
        description: Maven classifier of component's asset
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: npm.scope
        in: query
        description: npm scope
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nuget.id
        in: query
        description: NuGet id
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nuget.tags
        in: query
        description: NuGet tags
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: p2.pluginName
        in: query
        description: p2 plugin name
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: pypi.classifiers
        in: query
        description: PyPI classifiers
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: pypi.description
        in: query
        description: PyPI description
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: pypi.keywords
        in: query
        description: PyPI keywords
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: pypi.summary
        in: query
        description: PyPI summary
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: rubygems.description
        in: query
        description: RubyGems description
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: rubygems.platform
        in: query
        description: RubyGems platform
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: rubygems.summary
        in: query
        description: RubyGems summary
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: yum.architecture
        in: query
        description: Yum architecture
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageAssetXO'
  /v1/search/assets/download:
    get:
      tags:
      - Search
      summary: Search and download asset
      description: Returns a 302 Found with location header field set to download
        URL. Unless a sort parameter is supplied, the search must return a single
        asset to receive download URL.
      operationId: searchAndDownloadAssets
      parameters:
      - name: sort
        in: query
        description: The field to sort the results against, if left empty and more
          than 1 result is returned, the request will fail.
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          enum:
          - group
          - name
          - version
          - repository
      - name: direction
        in: query
        description: The direction to sort records in, defaults to ascending ('asc')
          for all sort fields, except version, which defaults to descending ('desc')
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          enum:
          - asc
          - desc
      - name: timeout
        in: query
        description: How long to wait for search results in seconds. If this value
          is not provided, the system default timeout will be used.
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: q
        in: query
        description: Query by keyword
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repository
        in: query
        description: Repository name
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: format
        in: query
        description: Query by format
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: group
        in: query
        description: Component group
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: name
        in: query
        description: Component name
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: version
        in: query
        description: Component version
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: md5
        in: query
        description: Specific MD5 hash of component's asset
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sha1
        in: query
        description: Specific SHA-1 hash of component's asset
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sha256
        in: query
        description: Specific SHA-256 hash of component's asset
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sha512
        in: query
        description: Specific SHA-512 hash of component's asset
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: prerelease
        in: query
        description: Prerelease version flag
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: conan.baseVersion
        in: query
        description: baseVersion
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: conan.channel
        in: query
        description: channel
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: docker.imageName
        in: query
        description: Docker image name
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: docker.imageTag
        in: query
        description: Docker image tag
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: docker.layerId
        in: query
        description: Docker layer ID
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: docker.contentDigest
        in: query
        description: Docker content digest
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: maven.groupId
        in: query
        description: Maven groupId
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: maven.artifactId
        in: query
        description: Maven artifactId
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: maven.baseVersion
        in: query
        description: Maven base version
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: maven.extension
        in: query
        description: Maven extension of component's asset
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: maven.classifier
        in: query
        description: Maven classifier of component's asset
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: npm.scope
        in: query
        description: npm scope
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nuget.id
        in: query
        description: NuGet id
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nuget.tags
        in: query
        description: NuGet tags
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: p2.pluginName
        in: query
        description: p2 plugin name
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: pypi.classifiers
        in: query
        description: PyPI classifiers
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: pypi.description
        in: query
        description: PyPI description
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: pypi.keywords
        in: query
        description: PyPI keywords
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: pypi.summary
        in: query
        description: PyPI summary
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: rubygems.description
        in: query
        description: RubyGems description
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: rubygems.platform
        in: query
        description: RubyGems platform
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: rubygems.summary
        in: query
        description: RubyGems summary
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: yum.architecture
        in: query
        description: Yum architecture
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "400":
          description: Search returned multiple assets, please refine search criteria
            to find a single asset or use the sort query parameter to retrieve the
            first result.
          content: {}
        "404":
          description: Asset search returned no results
          content: {}
  /v1/search:
    get:
      tags:
      - Search
      summary: Search components
      operationId: search
      parameters:
      - name: continuationToken
        in: query
        description: A token returned by a prior request. If present, the next page
          of results are returned
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
      - name: sort
        in: query
        description: The field to sort the results against, if left empty, a sort
          based on match weight will be used.
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          enum:
          - group
          - name
          - version
          - repository
      - name: direction
        in: query
        description: The direction to sort records in, defaults to ascending ('asc')
          for all sort fields, except version, which defaults to descending ('desc')
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          enum:
          - asc
          - desc
      - name: timeout
        in: query
        description: How long to wait for search results in seconds. If this value
          is not provided, the system default timeout will be used.
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: q
        in: query
        description: Query by keyword
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repository
        in: query
        description: Repository name
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: format
        in: query
        description: Query by format
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: group
        in: query
        description: Component group
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: name
        in: query
        description: Component name
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: version
        in: query
        description: Component version
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: md5
        in: query
        description: Specific MD5 hash of component's asset
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sha1
        in: query
        description: Specific SHA-1 hash of component's asset
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sha256
        in: query
        description: Specific SHA-256 hash of component's asset
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sha512
        in: query
        description: Specific SHA-512 hash of component's asset
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: prerelease
        in: query
        description: Prerelease version flag
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: conan.baseVersion
        in: query
        description: baseVersion
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: conan.channel
        in: query
        description: channel
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: docker.imageName
        in: query
        description: Docker image name
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: docker.imageTag
        in: query
        description: Docker image tag
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: docker.layerId
        in: query
        description: Docker layer ID
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: docker.contentDigest
        in: query
        description: Docker content digest
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: maven.groupId
        in: query
        description: Maven groupId
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: maven.artifactId
        in: query
        description: Maven artifactId
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: maven.baseVersion
        in: query
        description: Maven base version
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: maven.extension
        in: query
        description: Maven extension of component's asset
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: maven.classifier
        in: query
        description: Maven classifier of component's asset
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: npm.scope
        in: query
        description: npm scope
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nuget.id
        in: query
        description: NuGet id
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nuget.tags
        in: query
        description: NuGet tags
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: p2.pluginName
        in: query
        description: p2 plugin name
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: pypi.classifiers
        in: query
        description: PyPI classifiers
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: pypi.description
        in: query
        description: PyPI description
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: pypi.keywords
        in: query
        description: PyPI keywords
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: pypi.summary
        in: query
        description: PyPI summary
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: rubygems.description
        in: query
        description: RubyGems description
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: rubygems.platform
        in: query
        description: RubyGems platform
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: rubygems.summary
        in: query
        description: RubyGems summary
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: yum.architecture
        in: query
        description: Yum architecture
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageComponentXO'
  /v1/formats/{format}/upload-specs:
    get:
      tags:
      - Formats
      summary: Get upload field requirements for the desired format
      operationId: get_1
      parameters:
      - name: format
        in: path
        description: The desired repository format
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadDefinitionXO'
  /v1/formats/upload-specs:
    get:
      tags:
      - Formats
      summary: Get upload field requirements for each supported format
      operationId: get_2
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UploadDefinitionXO'
                x-content-type: application/json
  /v1/security/privileges/repository-content-selector:
    post:
      tags:
      - 'Security management: privileges'
      summary: Create a repository content selector type privilege.
      operationId: createPrivilege_2
      requestBody:
        description: The privilege to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiPrivilegeRepositoryContentSelectorRequest'
        required: false
      responses:
        "400":
          description: Privilege object not configured properly.
          content: {}
        "403":
          description: The user does not have permission to perform the operation.
          content: {}
      x-codegen-request-body-name: body
  /v1/security/privileges/repository-admin:
    post:
      tags:
      - 'Security management: privileges'
      summary: Create a repository admin type privilege.
      operationId: createPrivilege_3
      requestBody:
        description: The privilege to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiPrivilegeRepositoryAdminRequest'
        required: false
      responses:
        "400":
          description: Privilege object not configured properly.
          content: {}
        "403":
          description: The user does not have permission to perform the operation.
          content: {}
      x-codegen-request-body-name: body
  /v1/security/privileges/repository-view:
    post:
      tags:
      - 'Security management: privileges'
      summary: Create a repository view type privilege.
      operationId: createPrivilege_4
      requestBody:
        description: The privilege to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiPrivilegeRepositoryViewRequest'
        required: false
      responses:
        "400":
          description: Privilege object not configured properly.
          content: {}
        "403":
          description: The user does not have permission to perform the operation.
          content: {}
      x-codegen-request-body-name: body
  /v1/security/privileges/repository-view/{privilegeId}:
    put:
      tags:
      - 'Security management: privileges'
      summary: Update a repository view type privilege.
      operationId: updatePrivilege_2
      parameters:
      - name: privilegeId
        in: path
        description: The id of the privilege to update.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The privilege to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiPrivilegeRepositoryViewRequest'
        required: false
      responses:
        "400":
          description: Privilege object not configured properly.
          content: {}
        "403":
          description: The user does not have permission to perform the operation.
          content: {}
        "404":
          description: Privilege not found in the system.
          content: {}
      x-codegen-request-body-name: body
  /v1/security/privileges/repository-content-selector/{privilegeId}:
    put:
      tags:
      - 'Security management: privileges'
      summary: Update a repository content selector type privilege.
      operationId: updatePrivilege_3
      parameters:
      - name: privilegeId
        in: path
        description: The id of the privilege to update.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The privilege to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiPrivilegeRepositoryContentSelectorRequest'
        required: false
      responses:
        "400":
          description: Privilege object not configured properly.
          content: {}
        "403":
          description: The user does not have permission to perform the operation.
          content: {}
        "404":
          description: Privilege not found in the system.
          content: {}
      x-codegen-request-body-name: body
  /v1/security/privileges/repository-admin/{privilegeId}:
    put:
      tags:
      - 'Security management: privileges'
      summary: Update a repository admin type privilege.
      operationId: updatePrivilege_4
      parameters:
      - name: privilegeId
        in: path
        description: The id of the privilege to update.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The privilege to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiPrivilegeRepositoryAdminRequest'
        required: false
      responses:
        "400":
          description: Privilege object not configured properly.
          content: {}
        "403":
          description: The user does not have permission to perform the operation.
          content: {}
        "404":
          description: Privilege not found in the system.
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/maven/group:
    post:
      tags:
      - Repository Management
      summary: Create Maven group repository
      operationId: createGroupRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MavenGroupRepositoryApiRequest'
        required: false
      responses:
        "201":
          description: Repository created
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/maven/group/{repositoryName}:
    get:
      tags:
      - Repository Management
      summary: Get repository
      operationId: getMavenGroupRepository
      parameters:
      - name: repositoryName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiGroupRepository'
    put:
      tags:
      - Repository Management
      summary: Update Maven group repository
      operationId: updateMavenGroupRepository
      parameters:
      - name: repositoryName
        in: path
        description: Name of the repository to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MavenGroupRepositoryApiRequest'
        required: false
      responses:
        "204":
          description: Repository updated
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/maven/hosted/{repositoryName}:
    get:
      tags:
      - Repository Management
      summary: Get repository
      operationId: getMavenHostedRepository
      parameters:
      - name: repositoryName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MavenHostedApiRepository'
    put:
      tags:
      - Repository Management
      summary: Update Maven hosted repository
      operationId: updateMavenHostedRepository
      parameters:
      - name: repositoryName
        in: path
        description: Name of the repository to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MavenHostedRepositoryApiRequest'
        required: false
      responses:
        "204":
          description: Repository updated
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/maven/hosted:
    post:
      tags:
      - Repository Management
      summary: Create Maven hosted repository
      operationId: createMavenHostedRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MavenHostedRepositoryApiRequest'
        required: false
      responses:
        "201":
          description: Repository created
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/maven/proxy/{repositoryName}:
    get:
      tags:
      - Repository Management
      summary: Get repository
      operationId: getMavenProxyRepository
      parameters:
      - name: repositoryName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MavenProxyApiRepository'
    put:
      tags:
      - Repository Management
      summary: Update Maven proxy repository
      operationId: updateMavenProxyRepository
      parameters:
      - name: repositoryName
        in: path
        description: Name of the repository to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MavenProxyRepositoryApiRequest'
        required: false
      responses:
        "204":
          description: Repository updated
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/maven/proxy:
    post:
      tags:
      - Repository Management
      summary: Create Maven proxy repository
      operationId: createMavenProxyRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MavenProxyRepositoryApiRequest'
        required: false
      responses:
        "201":
          description: Repository created
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/security/privileges/script:
    post:
      tags:
      - 'Security management: privileges'
      summary: Create a script type privilege.
      operationId: createPrivilege_5
      requestBody:
        description: The privilege to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiPrivilegeScriptRequest'
        required: false
      responses:
        "400":
          description: Privilege object not configured properly.
          content: {}
        "403":
          description: The user does not have permission to perform the operation.
          content: {}
      x-codegen-request-body-name: body
  /v1/security/privileges/script/{privilegeId}:
    put:
      tags:
      - 'Security management: privileges'
      summary: Update a script type privilege.
      operationId: updatePrivilege_5
      parameters:
      - name: privilegeId
        in: path
        description: The id of the privilege to update.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The privilege to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiPrivilegeScriptRequest'
        required: false
      responses:
        "400":
          description: Privilege object not configured properly.
          content: {}
        "403":
          description: The user does not have permission to perform the operation.
          content: {}
        "404":
          description: Privilege not found in the system.
          content: {}
      x-codegen-request-body-name: body
  /v1/script/{name}:
    get:
      tags:
      - Script
      summary: Read stored script by name
      operationId: read_1
      parameters:
      - name: name
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScriptXO'
        "404":
          description: No script with the specified name
          content: {}
    put:
      tags:
      - Script
      summary: Update stored script by name
      operationId: edit
      parameters:
      - name: name
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScriptXO'
        required: false
      responses:
        "204":
          description: Script was updated
          content: {}
        "404":
          description: No script with the specified name
          content: {}
        "410":
          description: Script updating is disabled
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - Script
      summary: Delete stored script by name
      operationId: delete_1
      parameters:
      - name: name
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Script was deleted
          content: {}
        "404":
          description: No script with the specified name
          content: {}
  /v1/script:
    get:
      tags:
      - Script
      summary: List all stored scripts
      operationId: browse
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScriptXO'
                x-content-type: application/json
    post:
      tags:
      - Script
      summary: Add a new script
      operationId: add
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScriptXO'
        required: false
      responses:
        "204":
          description: Script was added
          content: {}
        "410":
          description: Script creation is disabled
          content: {}
      x-codegen-request-body-name: body
  /v1/script/{name}/run:
    post:
      tags:
      - Script
      summary: Run stored script by name
      operationId: run_1
      parameters:
      - name: name
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
          application/json:
            schema:
              type: string
        required: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScriptResultXO'
        "404":
          description: No script with the specified name
          content: {}
        "500":
          description: Script execution failed with exception
          content: {}
      x-codegen-request-body-name: body
  /v1/blobstores/s3/{name}:
    get:
      tags:
      - Blob store
      summary: Fetch a S3 blob store configuration
      operationId: getBlobStore
      parameters:
      - name: name
        in: path
        description: Name of the blob store configuration to fetch
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content: {}
        "400":
          description: Specified S3 blob store doesn't exist
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
    put:
      tags:
      - Blob store
      summary: Update an S3 blob store configuration
      operationId: updateBlobStore
      parameters:
      - name: name
        in: path
        description: Name of the blob store to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/S3BlobStoreApiModel'
        required: false
      responses:
        "204":
          description: S3 blob store updated
          content: {}
        "400":
          description: Specified S3 blob store doesn't exist
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/blobstores/s3:
    post:
      tags:
      - Blob store
      summary: Create an S3 blob store
      operationId: createBlobStore
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/S3BlobStoreApiModel'
        required: false
      responses:
        "201":
          description: S3 blob store created
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/raw/group:
    post:
      tags:
      - Repository Management
      summary: Create raw group repository
      operationId: createRawGroupRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RawGroupRepositoryApiRequest'
        required: false
      responses:
        "201":
          description: Repository created
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/raw/group/{repositoryName}:
    get:
      tags:
      - Repository Management
      summary: Get repository
      operationId: getRawGroupRepository
      parameters:
      - name: repositoryName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiGroupRepository'
    put:
      tags:
      - Repository Management
      summary: Update raw group repository
      operationId: updateRawGroupRepository
      parameters:
      - name: repositoryName
        in: path
        description: Name of the repository to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RawGroupRepositoryApiRequest'
        required: false
      responses:
        "204":
          description: Repository updated
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/raw/hosted:
    post:
      tags:
      - Repository Management
      summary: Create raw hosted repository
      operationId: createRawHostedRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RawHostedRepositoryApiRequest'
        required: false
      responses:
        "201":
          description: Repository created
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/raw/hosted/{repositoryName}:
    get:
      tags:
      - Repository Management
      summary: Get repository
      operationId: getRawHostedRepository
      parameters:
      - name: repositoryName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiHostedRepository'
    put:
      tags:
      - Repository Management
      summary: Update raw hosted repository
      operationId: updateRawHostedRepository
      parameters:
      - name: repositoryName
        in: path
        description: Name of the repository to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RawHostedRepositoryApiRequest'
        required: false
      responses:
        "204":
          description: Repository updated
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/raw/proxy:
    post:
      tags:
      - Repository Management
      summary: Create raw proxy repository
      operationId: createRawProxyRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RawProxyRepositoryApiRequest'
        required: false
      responses:
        "201":
          description: Repository created
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/raw/proxy/{repositoryName}:
    get:
      tags:
      - Repository Management
      summary: Get repository
      operationId: getRawProxyRepository
      parameters:
      - name: repositoryName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiProxyRepository'
    put:
      tags:
      - Repository Management
      summary: Update raw proxy repository
      operationId: updateRawProxyRepository
      parameters:
      - name: repositoryName
        in: path
        description: Name of the repository to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RawProxyRepositoryApiRequest'
        required: false
      responses:
        "204":
          description: Repository updated
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/npm/group/{repositoryName}:
    get:
      tags:
      - Repository Management
      summary: Get repository
      operationId: getNpmGroupRepository
      parameters:
      - name: repositoryName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiGroupDeployRepository'
    put:
      tags:
      - Repository Management
      summary: Update npm group repository
      operationId: updateNpmGroupRepository
      parameters:
      - name: repositoryName
        in: path
        description: Name of the repository to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NpmGroupRepositoryApiRequest'
        required: false
      responses:
        "204":
          description: Repository updated
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/npm/group:
    post:
      tags:
      - Repository Management
      summary: Create npm group repository
      operationId: createNpmGroupRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NpmGroupRepositoryApiRequest'
        required: false
      responses:
        "201":
          description: Repository created
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/npm/hosted:
    post:
      tags:
      - Repository Management
      summary: Create npm hosted repository
      operationId: createNpmHostedRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NpmHostedRepositoryApiRequest'
        required: false
      responses:
        "201":
          description: Repository created
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/npm/hosted/{repositoryName}:
    get:
      tags:
      - Repository Management
      summary: Get repository
      operationId: getNpmHostedRepository
      parameters:
      - name: repositoryName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiHostedRepository'
    put:
      tags:
      - Repository Management
      summary: Update npm hosted repository
      operationId: updateNpmHostedRepository
      parameters:
      - name: repositoryName
        in: path
        description: Name of the repository to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NpmHostedRepositoryApiRequest'
        required: false
      responses:
        "204":
          description: Repository updated
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/npm/proxy/{repositoryName}:
    get:
      tags:
      - Repository Management
      summary: Get repository
      operationId: getNpmProxyRepository
      parameters:
      - name: repositoryName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NpmProxyApiRepository'
    put:
      tags:
      - Repository Management
      summary: Update npm proxy repository
      operationId: updateNpmProxyRepository
      parameters:
      - name: repositoryName
        in: path
        description: Name of the repository to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NpmProxyRepositoryApiRequest'
        required: false
      responses:
        "204":
          description: Repository updated
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/npm/proxy:
    post:
      tags:
      - Repository Management
      summary: Create npm proxy repository
      operationId: createNpmProxyRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NpmProxyRepositoryApiRequest'
        required: false
      responses:
        "201":
          description: Repository created
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/helm/hosted:
    post:
      tags:
      - Repository Management
      summary: Create Helm hosted repository
      operationId: createHelmHostedRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HelmHostedRepositoryApiRequest'
        required: false
      responses:
        "201":
          description: Repository created
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
        "405":
          description: Feature is disabled in High Availability
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/helm/hosted/{repositoryName}:
    get:
      tags:
      - Repository Management
      summary: Get repository
      operationId: getHelmHostedRepository
      parameters:
      - name: repositoryName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiHostedRepository'
    put:
      tags:
      - Repository Management
      summary: Update Helm hosted repository
      operationId: updateHelmHostedRepository
      parameters:
      - name: repositoryName
        in: path
        description: Name of the repository to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HelmHostedRepositoryApiRequest'
        required: false
      responses:
        "204":
          description: Repository updated
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/helm/proxy:
    post:
      tags:
      - Repository Management
      summary: Create Helm proxy repository
      operationId: createHelmProxyRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HelmProxyRepositoryApiRequest'
        required: false
      responses:
        "201":
          description: Repository created
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
        "405":
          description: Feature is disabled in High Availability
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/helm/proxy/{repositoryName}:
    get:
      tags:
      - Repository Management
      summary: Get repository
      operationId: getHelmProxyRepository
      parameters:
      - name: repositoryName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiProxyRepository'
    put:
      tags:
      - Repository Management
      summary: Update Helm proxy repository
      operationId: updateHelmProxyRepository
      parameters:
      - name: repositoryName
        in: path
        description: Name of the repository to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HelmProxyRepositoryApiRequest'
        required: false
      responses:
        "204":
          description: Repository updated
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/pypi/group:
    post:
      tags:
      - Repository Management
      summary: Create PyPI group repository
      operationId: createPypiGroupRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PypiGroupRepositoryApiRequest'
        required: false
      responses:
        "201":
          description: Repository created
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/pypi/group/{repositoryName}:
    get:
      tags:
      - Repository Management
      summary: Get repository
      operationId: getPypiGroupRepository
      parameters:
      - name: repositoryName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiGroupRepository'
    put:
      tags:
      - Repository Management
      summary: Update PyPI group repository
      operationId: updatePypiGroupRepository
      parameters:
      - name: repositoryName
        in: path
        description: Name of the repository to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PypiGroupRepositoryApiRequest'
        required: false
      responses:
        "204":
          description: Repository updated
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/pypi/hosted:
    post:
      tags:
      - Repository Management
      summary: Create PyPI hosted repository
      operationId: createPypiHostedRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PypiHostedRepositoryApiRequest'
        required: false
      responses:
        "201":
          description: Repository created
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/pypi/hosted/{repositoryName}:
    get:
      tags:
      - Repository Management
      summary: Get repository
      operationId: getPypiHostedRepository
      parameters:
      - name: repositoryName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiHostedRepository'
    put:
      tags:
      - Repository Management
      summary: Update PyPI hosted repository
      operationId: updatePypiHostedRepository
      parameters:
      - name: repositoryName
        in: path
        description: Name of the repository to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PypiHostedRepositoryApiRequest'
        required: false
      responses:
        "204":
          description: Repository updated
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/pypi/proxy:
    post:
      tags:
      - Repository Management
      summary: Create PyPI proxy repository
      operationId: createPypiProxyRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PypiProxyRepositoryApiRequest'
        required: false
      responses:
        "201":
          description: Repository created
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/pypi/proxy/{repositoryName}:
    get:
      tags:
      - Repository Management
      summary: Get repository
      operationId: getPypiProxyRepository
      parameters:
      - name: repositoryName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiProxyRepository'
    put:
      tags:
      - Repository Management
      summary: Update PyPI proxy repository
      operationId: updatePypiProxyRepository
      parameters:
      - name: repositoryName
        in: path
        description: Name of the repository to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PypiProxyRepositoryApiRequest'
        required: false
      responses:
        "204":
          description: Repository updated
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/email:
    get:
      tags:
      - Email
      summary: Retrieve the current email configuration
      operationId: getEmailConfiguration
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiEmailConfiguration'
        "403":
          description: Insufficient permissions to retrieve the email configuration
          content: {}
    put:
      tags:
      - Email
      summary: Set the current email configuration
      operationId: setEmailConfiguration
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ApiEmailConfiguration'
        required: true
      responses:
        "204":
          description: Email configuration was successfully updated
          content: {}
        "400":
          description: Invalid request
          content: {}
        "403":
          description: Insufficient permissions to update the email configuration
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - Email
      summary: Disable and clear the email configuration
      operationId: deleteEmailConfiguration
      responses:
        "204":
          description: Email configuration was successfully cleared
          content: {}
  /v1/email/verify:
    post:
      tags:
      - Email
      summary: Send a test email to the email address provided in the request body
      operationId: testEmailConfiguration
      requestBody:
        description: An email address to send a test email to
        content:
          '*/*':
            schema:
              type: string
        required: true
      responses:
        "200":
          description: Validation was complete, look at the body to determine success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiEmailValidation'
        "403":
          description: Insufficient permissions to verify the email configuration
          content: {}
      x-codegen-request-body-name: body
  /v1/status/check:
    get:
      tags:
      - Status
      summary: Health check endpoint that returns the results of the system status
        checks
      operationId: getSystemStatusChecks
      responses:
        "200":
          description: The system status check results
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/Result'
                x-content-type: application/json
  /v1/status:
    get:
      tags:
      - Status
      summary: Health check endpoint that validates server can respond to read requests
      operationId: isAvailable
      responses:
        "200":
          description: Available to service requests
          content: {}
        "503":
          description: Unavailable to service requests
          content: {}
  /v1/status/writable:
    get:
      tags:
      - Status
      summary: Health check endpoint that validates server can respond to read and
        write requests
      operationId: isWritable
      responses:
        "200":
          description: Available to service requests
          content: {}
        "503":
          description: Unavailable to service requests
          content: {}
  /v1/support/supportzip:
    post:
      tags:
      - Support
      summary: Creates and downloads a support zip
      operationId: supportzip
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Request'
        required: false
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /v1/support/supportzippath:
    post:
      tags:
      - Support
      summary: Creates a support zip and returns the path
      operationId: supportzippath
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Request'
        required: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupportZipXO'
      x-codegen-request-body-name: body
  /v1/security/ldap/{name}:
    get:
      tags:
      - 'Security management: LDAP'
      summary: Get LDAP server
      operationId: getLdapServer
      parameters:
      - name: name
        in: path
        description: Name of the LDAP server to retrieve
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: LDAP server returned
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
        "404":
          description: LDAP server not found
          content: {}
    put:
      tags:
      - 'Security management: LDAP'
      summary: Update LDAP server
      operationId: updateLdapServer
      parameters:
      - name: name
        in: path
        description: Name of the LDAP server to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Updated values of LDAP server
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLdapServerXo'
        required: false
      responses:
        "204":
          description: LDAP server updated
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
        "404":
          description: LDAP server not found
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - 'Security management: LDAP'
      summary: Delete LDAP server
      operationId: deleteLdapServer
      parameters:
      - name: name
        in: path
        description: Name of the LDAP server to delete
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: LDAP server deleted
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
        "404":
          description: LDAP server not found
          content: {}
  /v1/security/ldap:
    get:
      tags:
      - 'Security management: LDAP'
      summary: List LDAP servers
      operationId: getLdapServers
      responses:
        "200":
          description: LDAP server list returned
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
    post:
      tags:
      - 'Security management: LDAP'
      summary: Create LDAP server
      operationId: createLdapServer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLdapServerXo'
        required: false
      responses:
        "201":
          description: LDAP server created
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/security/ldap/change-order:
    post:
      tags:
      - 'Security management: LDAP'
      summary: Change LDAP server order
      operationId: changeOrder
      requestBody:
        description: Ordered list of LDAP server names
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: false
      responses:
        "204":
          description: LDAP server order changed
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/system/license:
    get:
      tags:
      - Product licensing
      summary: Get the current license status.
      operationId: getLicenseStatus
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiLicenseDetailsXO'
    post:
      tags:
      - Product licensing
      summary: Upload a new license file.
      description: Server must be restarted to take effect
      operationId: setLicense
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/InputStream'
        required: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiLicenseDetailsXO'
      x-codegen-request-body-name: body
    delete:
      tags:
      - Product licensing
      summary: Uninstall license if present.
      operationId: removeLicense
      responses:
        default:
          description: successful operation
          content: {}
  /v1/iq:
    get:
      tags:
      - Manage IQ server configuration
      summary: Get IQ server configuration
      operationId: getConfiguration
      responses:
        "200":
          description: IQ server configuration returned
          content: {}
    put:
      tags:
      - Manage IQ server configuration
      summary: Update IQ server configuration
      operationId: updateConfiguration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IqConnectionXo'
        required: false
      responses:
        "204":
          description: IQ server configuration has been updated
          content: {}
      x-codegen-request-body-name: body
  /v1/iq/verify-connection:
    post:
      tags:
      - Manage IQ server configuration
      summary: Verify IQ server connection
      operationId: verifyConnection
      responses:
        "200":
          description: Connection verification complete, check response body for result
          content: {}
  /v1/iq/enable:
    post:
      tags:
      - Manage IQ server configuration
      summary: Enable IQ server
      operationId: enableIq
      responses:
        "204":
          description: IQ server has been enabled
          content: {}
        "400":
          description: IQ server connection not configured
          content: {}
  /v1/iq/disable:
    post:
      tags:
      - Manage IQ server configuration
      summary: Disable IQ server
      operationId: disableIq
      responses:
        "204":
          description: IQ server has been disabled
          content: {}
        "400":
          description: IQ server connection not configured
          content: {}
  /v1/repositories/{repositoryName}/health-check:
    post:
      tags:
      - Repository Management
      summary: Enable repository health check. Proxy repositories only.
      operationId: enableRepositoryHealthCheck
      parameters:
      - name: repositoryName
        in: path
        description: Name of the repository to enable Repository Health Check for
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Repository Health Check enabled
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
        "404":
          description: Repository not found
          content: {}
        "409":
          description: EULA not accepted or Repository Health Check capability not
            active
          content: {}
    delete:
      tags:
      - Repository Management
      summary: Disable repository health check. Proxy repositories only.
      operationId: disableRepositoryHealthCheck
      parameters:
      - name: repositoryName
        in: path
        description: Name of the repository to disable Repository Health Check for
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Repository Health Check disabled
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
        "404":
          description: Repository not found
          content: {}
  /v1/repositories/nuget/group:
    post:
      tags:
      - Repository Management
      summary: Create NuGet group repository
      operationId: createNugetGroupRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NugetGroupRepositoryApiRequest'
        required: false
      responses:
        "201":
          description: Repository created
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/nuget/group/{repositoryName}:
    get:
      tags:
      - Repository Management
      summary: Get repository
      operationId: getNugetGroupRepository
      parameters:
      - name: repositoryName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiGroupRepository'
    put:
      tags:
      - Repository Management
      summary: Update NuGet group repository
      operationId: updateNugetGroupRepository
      parameters:
      - name: repositoryName
        in: path
        description: Name of the repository to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NugetGroupRepositoryApiRequest'
        required: false
      responses:
        "204":
          description: Repository updated
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/nuget/hosted:
    post:
      tags:
      - Repository Management
      summary: Create NuGet hosted repository
      operationId: createNugetHostedRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NugetHostedRepositoryApiRequest'
        required: false
      responses:
        "201":
          description: Repository created
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/nuget/hosted/{repositoryName}:
    get:
      tags:
      - Repository Management
      summary: Get repository
      operationId: getNugetHostedRepository
      parameters:
      - name: repositoryName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiHostedRepository'
    put:
      tags:
      - Repository Management
      summary: Update NuGet hosted repository
      operationId: updateNugetHostedRepository
      parameters:
      - name: repositoryName
        in: path
        description: Name of the repository to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NugetHostedRepositoryApiRequest'
        required: false
      responses:
        "204":
          description: Repository updated
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/nuget/proxy/{repositoryName}:
    get:
      tags:
      - Repository Management
      summary: Get repository
      operationId: getNugetProxyRepository
      parameters:
      - name: repositoryName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NugetProxyApiRepository'
    put:
      tags:
      - Repository Management
      summary: Update NuGet proxy repository
      operationId: updateNugetProxyRepository
      parameters:
      - name: repositoryName
        in: path
        description: Name of the repository to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NugetProxyRepositoryApiRequest'
        required: false
      responses:
        "204":
          description: Repository updated
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/nuget/proxy:
    post:
      tags:
      - Repository Management
      summary: Create NuGet proxy repository
      operationId: createNugetProxyRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NugetProxyRepositoryApiRequest'
        required: false
      responses:
        "201":
          description: Repository created
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/rubygems/group:
    post:
      tags:
      - Repository Management
      summary: Create RubyGems group repository
      operationId: createRubygemsGroupRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RubyGemsGroupRepositoryApiRequest'
        required: false
      responses:
        "201":
          description: Repository created
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/rubygems/group/{repositoryName}:
    get:
      tags:
      - Repository Management
      summary: Get repository
      operationId: getRubygemsGroupRepository
      parameters:
      - name: repositoryName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiGroupRepository'
    put:
      tags:
      - Repository Management
      summary: Update RubyGems group repository
      operationId: updateRubygemsGroupRepository
      parameters:
      - name: repositoryName
        in: path
        description: Name of the repository to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RubyGemsGroupRepositoryApiRequest'
        required: false
      responses:
        "204":
          description: Repository updated
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/rubygems/hosted:
    post:
      tags:
      - Repository Management
      summary: Create RubyGems hosted repository
      operationId: createRubygemsHostedRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RubyGemsHostedRepositoryApiRequest'
        required: false
      responses:
        "201":
          description: Repository created
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/rubygems/hosted/{repositoryName}:
    get:
      tags:
      - Repository Management
      summary: Get repository
      operationId: getRubygemsHostedRepository
      parameters:
      - name: repositoryName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiHostedRepository'
    put:
      tags:
      - Repository Management
      summary: Update RubyGems hosted repository
      operationId: updateRubygemsHostedRepository
      parameters:
      - name: repositoryName
        in: path
        description: Name of the repository to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RubyGemsHostedRepositoryApiRequest'
        required: false
      responses:
        "204":
          description: Repository updated
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/rubygems/proxy:
    post:
      tags:
      - Repository Management
      summary: Create RubyGems proxy repository
      operationId: createRubygemsProxyRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RubyGemsProxyRepositoryApiRequest'
        required: false
      responses:
        "201":
          description: Repository created
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/rubygems/proxy/{repositoryName}:
    get:
      tags:
      - Repository Management
      summary: Get repository
      operationId: getRubygemsProxyRepository
      parameters:
      - name: repositoryName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiProxyRepository'
    put:
      tags:
      - Repository Management
      summary: Update RubyGems proxy repository
      operationId: updateRubygemsProxyRepository
      parameters:
      - name: repositoryName
        in: path
        description: Name of the repository to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RubyGemsProxyRepositoryApiRequest'
        required: false
      responses:
        "204":
          description: Repository updated
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/docker/group/{repositoryName}:
    get:
      tags:
      - Repository Management
      summary: Get repository
      operationId: getDockerGroupRepository
      parameters:
      - name: repositoryName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockerGroupApiRepository'
    put:
      tags:
      - Repository Management
      summary: Update Docker group repository
      operationId: updateDockerGroupRepository
      parameters:
      - name: repositoryName
        in: path
        description: Name of the repository to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DockerGroupRepositoryApiRequest'
        required: false
      responses:
        "204":
          description: Repository updated
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
        "404":
          description: Repository not found
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/docker/group:
    post:
      tags:
      - Repository Management
      summary: Create Docker group repository
      operationId: createDockerGroupRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DockerGroupRepositoryApiRequest'
        required: false
      responses:
        "201":
          description: Repository created
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/docker/hosted/{repositoryName}:
    get:
      tags:
      - Repository Management
      summary: Get repository
      operationId: getDockerHostedRepository
      parameters:
      - name: repositoryName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockerHostedApiRepository'
    put:
      tags:
      - Repository Management
      summary: Update Docker hosted repository
      operationId: updateDockerHostedRepository
      parameters:
      - name: repositoryName
        in: path
        description: Name of the repository to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DockerHostedRepositoryApiRequest'
        required: false
      responses:
        "204":
          description: Repository updated
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
        "404":
          description: Repository not found
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/docker/hosted:
    post:
      tags:
      - Repository Management
      summary: Create Docker hosted repository
      operationId: createDockerHostedRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DockerHostedRepositoryApiRequest'
        required: false
      responses:
        "201":
          description: Repository created
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Repository not found
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/docker/proxy/{repositoryName}:
    get:
      tags:
      - Repository Management
      summary: Get repository
      operationId: getDockerProxyRepository
      parameters:
      - name: repositoryName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockerProxyApiRepository'
    put:
      tags:
      - Repository Management
      summary: Update Docker group repository
      operationId: updateDockerProxyRepository
      parameters:
      - name: repositoryName
        in: path
        description: Name of the repository to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DockerProxyRepositoryApiRequest'
        required: false
      responses:
        "204":
          description: Repository updated
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
        "404":
          description: Repository not found
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/docker/proxy:
    post:
      tags:
      - Repository Management
      summary: Create Docker proxy repository
      operationId: createDockerProxyRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DockerProxyRepositoryApiRequest'
        required: false
      responses:
        "201":
          description: Repository created
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/yum/group:
    post:
      tags:
      - Repository Management
      summary: Create Yum group repository
      operationId: createYumGroupRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/YumGroupRepositoryApiRequest'
        required: false
      responses:
        "201":
          description: Repository created
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/yum/group/{repositoryName}:
    get:
      tags:
      - Repository Management
      summary: Get repository
      operationId: getYumGroupRepository
      parameters:
      - name: repositoryName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiGroupRepository'
    put:
      tags:
      - Repository Management
      summary: Update Yum group repository
      operationId: updateYumGroupRepository
      parameters:
      - name: repositoryName
        in: path
        description: Name of the repository to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/YumGroupRepositoryApiRequest'
        required: false
      responses:
        "204":
          description: Repository updated
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/yum/hosted/{repositoryName}:
    get:
      tags:
      - Repository Management
      summary: Get repository
      operationId: getYumHostedRepository
      parameters:
      - name: repositoryName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/YumHostedApiRepository'
    put:
      tags:
      - Repository Management
      summary: Update Yum hosted repository
      operationId: updateYumHostedRepository
      parameters:
      - name: repositoryName
        in: path
        description: Name of the repository to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/YumHostedRepositoryApiRequest'
        required: false
      responses:
        "204":
          description: Repository updated
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/yum/hosted:
    post:
      tags:
      - Repository Management
      summary: Create Yum hosted repository
      operationId: createYumHostedRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/YumHostedRepositoryApiRequest'
        required: false
      responses:
        "201":
          description: Repository created
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/yum/proxy:
    post:
      tags:
      - Repository Management
      summary: Create Yum proxy repository
      operationId: createYumProxyRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/YumProxyRepositoryApiRequest'
        required: false
      responses:
        "201":
          description: Repository created
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/yum/proxy/{repositoryName}:
    get:
      tags:
      - Repository Management
      summary: Get repository
      operationId: getYumProxyRepository
      parameters:
      - name: repositoryName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiProxyRepository'
    put:
      tags:
      - Repository Management
      summary: Update Yum proxy repository
      operationId: updateYumProxyRepository
      parameters:
      - name: repositoryName
        in: path
        description: Name of the repository to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/YumProxyRepositoryApiRequest'
        required: false
      responses:
        "204":
          description: Repository updated
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/apt/hosted/{repositoryName}:
    get:
      tags:
      - Repository Management
      summary: Get repository
      operationId: getAptHostedRepository
      parameters:
      - name: repositoryName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AptHostedApiRepository'
    put:
      tags:
      - Repository Management
      summary: Update APT hosted repository
      operationId: updateAptHostedRepository
      parameters:
      - name: repositoryName
        in: path
        description: Name of the repository to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AptHostedRepositoryApiRequest'
        required: false
      responses:
        "204":
          description: Repository updated
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
        "404":
          description: Repository not found
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/apt/hosted:
    post:
      tags:
      - Repository Management
      summary: Create APT hosted repository
      operationId: createAptHostedRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AptHostedRepositoryApiRequest'
        required: false
      responses:
        "201":
          description: Repository created
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
        "405":
          description: Feature is disabled in High Availability
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/apt/proxy/{repositoryName}:
    get:
      tags:
      - Repository Management
      summary: Get repository
      operationId: getAptProxyRepository
      parameters:
      - name: repositoryName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AptProxyApiRepository'
    put:
      tags:
      - Repository Management
      summary: Update APT proxy repository
      operationId: updateAptProxyRepository
      parameters:
      - name: repositoryName
        in: path
        description: Name of the repository to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AptProxyRepositoryApiRequest'
        required: false
      responses:
        "204":
          description: Repository updated
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
        "404":
          description: Repository not found
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/apt/proxy:
    post:
      tags:
      - Repository Management
      summary: Create APT proxy repository
      operationId: createAptProxyRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AptProxyRepositoryApiRequest'
        required: false
      responses:
        "201":
          description: Repository created
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
        "405":
          description: Feature is disabled in High Availability
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/cocoapods/proxy:
    post:
      tags:
      - Repository Management
      summary: Create Cocoapods proxy repository
      operationId: createCocoapodsProxyRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CocoapodsProxyRepositoryApiRequest'
        required: false
      responses:
        "201":
          description: Repository created
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
        "405":
          description: Feature is disabled in High Availability
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/cocoapods/proxy/{repositoryName}:
    get:
      tags:
      - Repository Management
      summary: Get repository
      operationId: getCocoapodsProxyRepository
      parameters:
      - name: repositoryName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiProxyRepository'
    put:
      tags:
      - Repository Management
      summary: Update Cocoapods proxy repository
      operationId: updateCocoapodsProxyRepository
      parameters:
      - name: repositoryName
        in: path
        description: Name of the repository to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CocoapodsProxyRepositoryApiRequest'
        required: false
      responses:
        "204":
          description: Repository updated
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/conan/proxy:
    post:
      tags:
      - Repository Management
      summary: Create Conan proxy repository
      operationId: createConanProxyRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConanProxyRepositoryApiRequest'
        required: false
      responses:
        "201":
          description: Repository created
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
        "405":
          description: Feature is disabled in High Availability
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/conan/proxy/{repositoryName}:
    get:
      tags:
      - Repository Management
      summary: Get repository
      operationId: getConanProxyRepository
      parameters:
      - name: repositoryName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiProxyRepository'
    put:
      tags:
      - Repository Management
      summary: Update Conan proxy repository
      operationId: updateConanProxyRepository
      parameters:
      - name: repositoryName
        in: path
        description: Name of the repository to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConanProxyRepositoryApiRequest'
        required: false
      responses:
        "204":
          description: Repository updated
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
        "404":
          description: Repository not found
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/conda/proxy:
    post:
      tags:
      - Repository Management
      summary: Create conda proxy repository
      operationId: createCondaProxyRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CondaProxyRepositoryApiRequest'
        required: false
      responses:
        "201":
          description: Repository created
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
        "405":
          description: Feature is disabled in High Availability
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/conda/proxy/{repositoryName}:
    get:
      tags:
      - Repository Management
      summary: Get repository
      operationId: getCondaProxyRepository
      parameters:
      - name: repositoryName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiProxyRepository'
    put:
      tags:
      - Repository Management
      summary: Update conda proxy repository
      operationId: updateCondaProxyRepository
      parameters:
      - name: repositoryName
        in: path
        description: Name of the repository to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CondaProxyRepositoryApiRequest'
        required: false
      responses:
        "204":
          description: Repository updated
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/go/group:
    post:
      tags:
      - Repository Management
      summary: Create a Go group repository
      operationId: createGoGroupRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GolangGroupRepositoryApiRequest'
        required: false
      responses:
        "201":
          description: Repository created
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
        "405":
          description: Feature is disabled in High Availability
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/go/group/{repositoryName}:
    get:
      tags:
      - Repository Management
      summary: Get repository
      operationId: getGoGroupRepository
      parameters:
      - name: repositoryName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiGroupRepository'
    put:
      tags:
      - Repository Management
      summary: Update a Go group repository
      operationId: updateGoGroupRepository
      parameters:
      - name: repositoryName
        in: path
        description: Name of the repository to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GolangGroupRepositoryApiRequest'
        required: false
      responses:
        "204":
          description: Repository updated
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
        "404":
          description: Repository not found
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/go/proxy:
    post:
      tags:
      - Repository Management
      summary: Create a Go proxy repository
      operationId: createGoProxyRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GolangProxyRepositoryApiRequest'
        required: false
      responses:
        "201":
          description: Repository created
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
        "405":
          description: Feature is disabled in High Availability
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/go/proxy/{repositoryName}:
    get:
      tags:
      - Repository Management
      summary: Get repository
      operationId: getGoProxyRepository
      parameters:
      - name: repositoryName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiProxyRepository'
    put:
      tags:
      - Repository Management
      summary: Update a Go proxy repository
      operationId: updateGoProxyRepository
      parameters:
      - name: repositoryName
        in: path
        description: Name of the repository to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GolangProxyRepositoryApiRequest'
        required: false
      responses:
        "204":
          description: Repository updated
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
        "404":
          description: Repository not found
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/p2/proxy:
    post:
      tags:
      - Repository Management
      summary: Create p2 proxy repository
      operationId: createP2ProxyRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/P2ProxyRepositoryApiRequest'
        required: false
      responses:
        "201":
          description: Repository created
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
        "405":
          description: Feature is disabled in High Availability
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/p2/proxy/{repositoryName}:
    get:
      tags:
      - Repository Management
      summary: Get repository
      operationId: getP2ProxyRepository
      parameters:
      - name: repositoryName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiProxyRepository'
    put:
      tags:
      - Repository Management
      summary: Update p2 proxy repository
      operationId: updateP2ProxyRepository
      parameters:
      - name: repositoryName
        in: path
        description: Name of the repository to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/P2ProxyRepositoryApiRequest'
        required: false
      responses:
        "204":
          description: Repository updated
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/r/group:
    post:
      tags:
      - Repository Management
      summary: Create R group repository
      operationId: createRGroupRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RGroupRepositoryApiRequest'
        required: false
      responses:
        "201":
          description: Repository created
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
        "405":
          description: Feature is disabled in High Availability
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/r/group/{repositoryName}:
    get:
      tags:
      - Repository Management
      summary: Get repository
      operationId: getRGroupRepository
      parameters:
      - name: repositoryName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiGroupRepository'
    put:
      tags:
      - Repository Management
      summary: Update R group repository
      operationId: updateRGroupRepository
      parameters:
      - name: repositoryName
        in: path
        description: Name of the repository to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RGroupRepositoryApiRequest'
        required: false
      responses:
        "204":
          description: Repository updated
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/r/hosted:
    post:
      tags:
      - Repository Management
      summary: Create R hosted repository
      operationId: createRHostedRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RHostedRepositoryApiRequest'
        required: false
      responses:
        "201":
          description: Repository created
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
        "405":
          description: Feature is disabled in High Availability
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/r/hosted/{repositoryName}:
    get:
      tags:
      - Repository Management
      summary: Get repository
      operationId: getRHostedRepository
      parameters:
      - name: repositoryName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiHostedRepository'
    put:
      tags:
      - Repository Management
      summary: Update R hosted repository
      operationId: updateRHostedRepository
      parameters:
      - name: repositoryName
        in: path
        description: Name of the repository to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RHostedRepositoryApiRequest'
        required: false
      responses:
        "204":
          description: Repository updated
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/r/proxy:
    post:
      tags:
      - Repository Management
      summary: Create R proxy repository
      operationId: createRProxyRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RProxyRepositoryApiRequest'
        required: false
      responses:
        "201":
          description: Repository created
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
        "405":
          description: Feature is disabled in High Availability
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/r/proxy/{repositoryName}:
    get:
      tags:
      - Repository Management
      summary: Get repository
      operationId: getRProxyRepository
      parameters:
      - name: repositoryName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiProxyRepository'
    put:
      tags:
      - Repository Management
      summary: Update R proxy repository
      operationId: updateRProxyRepository
      parameters:
      - name: repositoryName
        in: path
        description: Name of the repository to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RProxyRepositoryApiRequest'
        required: false
      responses:
        "204":
          description: Repository updated
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
        "404":
          description: Repository not found
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/bower/group:
    post:
      tags:
      - Repository Management
      summary: Create Bower group repository
      operationId: createBowerGroupRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BowerGroupRepositoryApiRequest'
        required: false
      responses:
        "201":
          description: Repository created
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/bower/group/{repositoryName}:
    get:
      tags:
      - Repository Management
      summary: Get repository
      operationId: getBowerGroupRepository
      parameters:
      - name: repositoryName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiGroupRepository'
    put:
      tags:
      - Repository Management
      summary: Update Bower group repository
      operationId: updateBowerGroupRepository
      parameters:
      - name: repositoryName
        in: path
        description: Name of the repository to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BowerGroupRepositoryApiRequest'
        required: false
      responses:
        "204":
          description: Repository updated
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/bower/hosted:
    post:
      tags:
      - Repository Management
      summary: Create Bower hosted repository
      operationId: createBowerHostedRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BowerHostedRepositoryApiRequest'
        required: false
      responses:
        "201":
          description: Repository created
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/bower/hosted/{repositoryName}:
    get:
      tags:
      - Repository Management
      summary: Get repository
      operationId: getBowerHostedRepository
      parameters:
      - name: repositoryName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiHostedRepository'
    put:
      tags:
      - Repository Management
      summary: Update Bower hosted repository
      operationId: updateBowerHostedRepository
      parameters:
      - name: repositoryName
        in: path
        description: Name of the repository to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BowerHostedRepositoryApiRequest'
        required: false
      responses:
        "204":
          description: Repository updated
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/bower/proxy/{repositoryName}:
    get:
      tags:
      - Repository Management
      summary: Get repository
      operationId: getBowerProxyRepository
      parameters:
      - name: repositoryName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BowerProxyApiRepository'
    put:
      tags:
      - Repository Management
      summary: Update Bower proxy repository
      operationId: updateBowerProxyRepository
      parameters:
      - name: repositoryName
        in: path
        description: Name of the repository to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BowerProxyRepositoryApiRequest'
        required: false
      responses:
        "204":
          description: Repository updated
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/bower/proxy:
    post:
      tags:
      - Repository Management
      summary: Create Bower proxy repository
      operationId: createBowerProxyRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BowerProxyRepositoryApiRequest'
        required: false
      responses:
        "201":
          description: Repository created
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/gitlfs/hosted:
    post:
      tags:
      - Repository Management
      summary: Create Git LFS hosted repository
      operationId: createGitlfsHostedRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GitLfsHostedRepositoryApiRequest'
        required: false
      responses:
        "201":
          description: Repository created
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
  /v1/repositories/gitlfs/hosted/{repositoryName}:
    get:
      tags:
      - Repository Management
      summary: Get repository
      operationId: getGitlfsHostedRepository
      parameters:
      - name: repositoryName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiHostedRepository'
    put:
      tags:
      - Repository Management
      summary: Update Git LFS hosted repository
      operationId: updateGitlfsHostedRepository
      parameters:
      - name: repositoryName
        in: path
        description: Name of the repository to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GitLfsHostedRepositoryApiRequest'
        required: false
      responses:
        "204":
          description: Repository updated
          content: {}
        "401":
          description: Authentication required
          content: {}
        "403":
          description: Insufficient permissions
          content: {}
      x-codegen-request-body-name: body
components:
  schemas:
    AnonymousAccessSettingsXO:
      type: object
      properties:
        enabled:
          type: boolean
          description: Whether or not Anonymous Access is enabled
        userId:
          type: string
          description: The username of the anonymous account
        realmName:
          type: string
          description: The name of the authentication realm for the anonymous account
      example:
        realmName: realmName
        userId: userId
        enabled: true
    ApiUserSource:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      example:
        name: name
        id: id
    ApiUser:
      required:
      - status
      type: object
      properties:
        userId:
          type: string
          description: The userid which is required for login. This value cannot be
            changed.
        firstName:
          type: string
          description: The first name of the user.
        lastName:
          type: string
          description: The last name of the user.
        emailAddress:
          type: string
          description: The email address associated with the user.
        source:
          type: string
          description: The user source which is the origin of this user. This value
            cannot be changed.
        status:
          type: string
          description: The user's status, e.g. active or disabled.
          enum:
          - active
          - locked
          - disabled
          - changepassword
        readOnly:
          type: boolean
          description: Indicates whether the user's properties could be modified by
            the Nexus Repository Manager. When false only roles are considered during
            update.
        roles:
          uniqueItems: true
          type: array
          description: The roles which the user has been assigned within Nexus.
          items:
            type: string
        externalRoles:
          uniqueItems: true
          type: array
          description: The roles which the user has been assigned in an external source,
            e.g. LDAP group. These cannot be changed within the Nexus Repository Manager.
          items:
            type: string
      example:
        firstName: firstName
        lastName: lastName
        emailAddress: emailAddress
        roles:
        - roles
        - roles
        externalRoles:
        - externalRoles
        - externalRoles
        readOnly: true
        source: source
        userId: userId
        status: active
    ApiCreateUser:
      required:
      - status
      type: object
      properties:
        userId:
          type: string
          description: The userid which is required for login. This value cannot be
            changed.
        firstName:
          type: string
          description: The first name of the user.
        lastName:
          type: string
          description: The last name of the user.
        emailAddress:
          type: string
          description: The email address associated with the user.
        password:
          type: string
          description: The password for the new user.
        status:
          type: string
          description: The user's status, e.g. active or disabled.
          enum:
          - active
          - locked
          - disabled
          - changepassword
        roles:
          uniqueItems: true
          type: array
          description: The roles which the user has been assigned within Nexus.
          items:
            type: string
    ApiPrivilege:
      type: object
      properties:
        type:
          type: string
          description: The type of privilege, each type covers different portions
            of the system. External values supplied to this will be ignored by the
            system.
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: The name of the privilege.  This value cannot be changed.
        description:
          type: string
        readOnly:
          type: boolean
          description: Indicates whether the privilege can be changed. External values
            supplied to this will be ignored by the system.
      example:
        name: name
        description: description
        readOnly: true
        type: type
    ApiPrivilegeWildcardRequest:
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: The name of the privilege.  This value cannot be changed.
        description:
          type: string
        pattern:
          type: string
          description: A colon separated list of parts that create a permission string.
    ApiPrivilegeApplicationRequest:
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: The name of the privilege.  This value cannot be changed.
        description:
          type: string
        actions:
          type: array
          description: A collection of actions to associate with the privilege, using
            BREAD syntax (browse,read,edit,add,delete,all) as well as 'run' for script
            privileges.
          items:
            type: string
            enum:
            - READ
            - BROWSE
            - EDIT
            - ADD
            - DELETE
            - RUN
            - ASSOCIATE
            - DISASSOCIATE
            - ALL
        domain:
          type: string
          description: The domain (i.e. 'blobstores', 'capabilities' or even '*' for
            all) that this privilege is granting access to.  Note that creating new
            privileges with a domain is only necessary when using plugins that define
            their own domain(s).
    RealmApiXO:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      example:
        name: name
        id: id
    RoleXOResponse:
      type: object
      properties:
        id:
          type: string
          description: The id of the role.
        source:
          type: string
          description: The user source which is the origin of this role.
        name:
          type: string
          description: The name of the role.
        description:
          type: string
          description: The description of this role.
        privileges:
          uniqueItems: true
          type: array
          description: The list of privileges assigned to this role.
          items:
            type: string
        roles:
          uniqueItems: true
          type: array
          description: The list of roles assigned to this role.
          items:
            type: string
      example:
        privileges:
        - privileges
        - privileges
        roles:
        - roles
        - roles
        name: name
        description: description
        id: id
        source: source
    RoleXORequest:
      type: object
      properties:
        id:
          type: string
          description: The id of the role.
        name:
          type: string
          description: The name of the role.
        description:
          type: string
          description: The description of this role.
        privileges:
          uniqueItems: true
          type: array
          description: The list of privileges assigned to this role.
          items:
            type: string
        roles:
          uniqueItems: true
          type: array
          description: The list of roles assigned to this role.
          items:
            type: string
    TaskXO:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
        message:
          type: string
        currentState:
          type: string
        lastRunResult:
          type: string
        nextRun:
          type: string
          format: date-time
        lastRun:
          type: string
          format: date-time
      example:
        lastRun: 2000-01-23T04:56:07.000+00:00
        name: name
        id: id
        type: type
        message: message
        currentState: currentState
        lastRunResult: lastRunResult
        nextRun: 2000-01-23T04:56:07.000+00:00
    Page:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
            properties: {}
        continuationToken:
          type: string
    PageTaskXO:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/TaskXO'
        continuationToken:
          type: string
      example:
        items:
        - lastRun: 2000-01-23T04:56:07.000+00:00
          name: name
          id: id
          type: type
          message: message
          currentState: currentState
          lastRunResult: lastRunResult
          nextRun: 2000-01-23T04:56:07.000+00:00
        - lastRun: 2000-01-23T04:56:07.000+00:00
          name: name
          id: id
          type: type
          message: message
          currentState: currentState
          lastRunResult: lastRunResult
          nextRun: 2000-01-23T04:56:07.000+00:00
        continuationToken: continuationToken
    BlobStoreQuotaResultXO:
      type: object
      properties:
        isViolation:
          type: boolean
        message:
          type: string
        blobStoreName:
          type: string
      example:
        blobStoreName: blobStoreName
        isViolation: true
        message: message
    BlobStoreApiSoftQuota:
      type: object
      properties:
        type:
          type: string
          description: The type to use such as spaceRemainingQuota, or spaceUsedQuota
        limit:
          type: integer
          description: The limit in MB.
          format: int64
      example:
        limit: 0
        type: type
    GenericBlobStoreApiResponse:
      type: object
      properties:
        softQuota:
          $ref: '#/components/schemas/BlobStoreApiSoftQuota'
        name:
          type: string
        type:
          type: string
        blobCount:
          type: integer
          format: int64
        totalSizeInBytes:
          type: integer
          format: int64
        availableSpaceInBytes:
          type: integer
          format: int64
      example:
        totalSizeInBytes: 1
        softQuota:
          limit: 0
          type: type
        blobCount: 6
        name: name
        availableSpaceInBytes: 5
        type: type
    FileBlobStoreApiCreateRequest:
      type: object
      properties:
        softQuota:
          $ref: '#/components/schemas/BlobStoreApiSoftQuota'
        path:
          type: string
          description: The path to the blobstore contents. This can be an absolute
            path to anywhere on the system Nexus Repository Manager has access to
            or it can be a path relative to the sonatype-work directory.
        name:
          type: string
    FileBlobStoreApiUpdateRequest:
      type: object
      properties:
        softQuota:
          $ref: '#/components/schemas/BlobStoreApiSoftQuota'
        path:
          type: string
          description: The path to the blobstore contents. This can be an absolute
            path to anywhere on the system Nexus Repository Manager has access to
            or it can be a path relative to the sonatype-work directory.
    FileBlobStoreApiModel:
      type: object
      properties:
        softQuota:
          $ref: '#/components/schemas/BlobStoreApiSoftQuota'
        path:
          type: string
          description: The path to the blobstore contents. This can be an absolute
            path to anywhere on the system Nexus Repository Manager has access to
            or it can be a path relative to the sonatype-work directory.
      example:
        path: path
        softQuota:
          limit: 0
          type: type
    ReadOnlyState:
      type: object
      properties:
        systemInitiated:
          type: boolean
        summaryReason:
          type: string
        frozen:
          type: boolean
      example:
        systemInitiated: true
        summaryReason: summaryReason
        frozen: true
    ApiCertificate:
      type: object
      properties:
        expiresOn:
          type: integer
          format: int64
        fingerprint:
          type: string
        id:
          type: string
        issuedOn:
          type: integer
          format: int64
        issuerCommonName:
          type: string
        issuerOrganization:
          type: string
        issuerOrganizationalUnit:
          type: string
        pem:
          type: string
        serialNumber:
          type: string
        subjectCommonName:
          type: string
        subjectOrganization:
          type: string
        subjectOrganizationalUnit:
          type: string
      example:
        issuerCommonName: issuerCommonName
        issuerOrganization: issuerOrganization
        serialNumber: serialNumber
        subjectOrganizationalUnit: subjectOrganizationalUnit
        subjectOrganization: subjectOrganization
        fingerprint: fingerprint
        pem: pem
        subjectCommonName: subjectCommonName
        expiresOn: 0
        id: id
        issuerOrganizationalUnit: issuerOrganizationalUnit
        issuedOn: 6
    AssetXO:
      type: object
      properties:
        downloadUrl:
          type: string
        path:
          type: string
        id:
          type: string
        repository:
          type: string
        format:
          type: string
        checksum:
          type: object
          additionalProperties:
            type: object
            properties: {}
            example: {}
        contentType:
          type: string
        lastModified:
          type: string
          format: date-time
      example:
        path: path
        downloadUrl: downloadUrl
        format: format
        checksum:
          key: {}
        id: id
        lastModified: 2000-01-23T04:56:07.000+00:00
        repository: repository
        contentType: contentType
    PageAssetXO:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/AssetXO'
        continuationToken:
          type: string
      example:
        items:
        - path: path
          downloadUrl: downloadUrl
          format: format
          checksum:
            key: {}
          id: id
          lastModified: 2000-01-23T04:56:07.000+00:00
          repository: repository
          contentType: contentType
        - path: path
          downloadUrl: downloadUrl
          format: format
          checksum:
            key: {}
          id: id
          lastModified: 2000-01-23T04:56:07.000+00:00
          repository: repository
          contentType: contentType
        continuationToken: continuationToken
    ComponentXO:
      type: object
      properties:
        id:
          type: string
        repository:
          type: string
        format:
          type: string
        group:
          type: string
        name:
          type: string
        version:
          type: string
        assets:
          type: array
          items:
            $ref: '#/components/schemas/AssetXO'
      example:
        assets:
        - path: path
          downloadUrl: downloadUrl
          format: format
          checksum:
            key: {}
          id: id
          lastModified: 2000-01-23T04:56:07.000+00:00
          repository: repository
          contentType: contentType
        - path: path
          downloadUrl: downloadUrl
          format: format
          checksum:
            key: {}
          id: id
          lastModified: 2000-01-23T04:56:07.000+00:00
          repository: repository
          contentType: contentType
        format: format
        name: name
        id: id
        repository: repository
        version: version
        group: group
    PageComponentXO:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ComponentXO'
        continuationToken:
          type: string
      example:
        items:
        - assets:
          - path: path
            downloadUrl: downloadUrl
            format: format
            checksum:
              key: {}
            id: id
            lastModified: 2000-01-23T04:56:07.000+00:00
            repository: repository
            contentType: contentType
          - path: path
            downloadUrl: downloadUrl
            format: format
            checksum:
              key: {}
            id: id
            lastModified: 2000-01-23T04:56:07.000+00:00
            repository: repository
            contentType: contentType
          format: format
          name: name
          id: id
          repository: repository
          version: version
          group: group
        - assets:
          - path: path
            downloadUrl: downloadUrl
            format: format
            checksum:
              key: {}
            id: id
            lastModified: 2000-01-23T04:56:07.000+00:00
            repository: repository
            contentType: contentType
          - path: path
            downloadUrl: downloadUrl
            format: format
            checksum:
              key: {}
            id: id
            lastModified: 2000-01-23T04:56:07.000+00:00
            repository: repository
            contentType: contentType
          format: format
          name: name
          id: id
          repository: repository
          version: version
          group: group
        continuationToken: continuationToken
    AbstractApiRepository:
      required:
      - online
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        format:
          type: string
          description: Component format held in this repository
          example: npm
        type:
          type: string
          description: Controls if deployments of and updates to artifacts are allowed
          example: hosted
          enum:
          - hosted
          - proxy
          - group
        url:
          type: string
          description: URL to the repository
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
      example:
        name: internal
        format: npm
        online: true
        type: hosted
        url: url
    ContentSelectorApiResponse:
      type: object
      properties:
        name:
          type: string
          description: The content selector name cannot be changed after creation
        type:
          type: string
          description: The type of content selector the backend is using
          enum:
          - csel
          - jexl
        description:
          type: string
          description: A human-readable description
        expression:
          type: string
          description: The expression used to identify content
          example: format == "maven2" and path =^ "/org/sonatype/nexus"
      example:
        expression: format == "maven2" and path =^ "/org/sonatype/nexus"
        name: name
        description: description
        type: csel
    ContentSelectorApiCreateRequest:
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: The content selector name cannot be changed after creation
        description:
          type: string
          description: A human-readable description
        expression:
          type: string
          description: The expression used to identify content
          example: format == "maven2" and path =^ "/org/sonatype/nexus"
    ContentSelectorApiUpdateRequest:
      type: object
      properties:
        description:
          type: string
          description: An optional description of this content selector
        expression:
          type: string
          description: The expression used to identify content
          example: format == "maven2" and path =^ "/org/sonatype/nexus"
    RepositoryXO:
      type: object
      properties:
        name:
          type: string
        format:
          type: string
        type:
          type: string
        url:
          type: string
        attributes:
          type: object
          additionalProperties:
            type: object
            properties: {}
            example: {}
      example:
        name: name
        format: format
        attributes:
          key: {}
        type: type
        url: url
    RoutingRuleXO:
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        description:
          type: string
        mode:
          type: string
          description: Determines what should be done with requests when their path
            matches any of the matchers
          enum:
          - BLOCK
          - ALLOW
        matchers:
          type: array
          description: Regular expressions used to identify request paths that are
            allowed or blocked (depending on mode)
          items:
            type: string
      example:
        mode: BLOCK
        matchers:
        - matchers
        - matchers
        name: name
        description: description
    UploadDefinitionXO:
      type: object
      properties:
        format:
          type: string
        multipleUpload:
          type: boolean
        componentFields:
          type: array
          items:
            $ref: '#/components/schemas/UploadFieldDefinitionXO'
        assetFields:
          type: array
          items:
            $ref: '#/components/schemas/UploadFieldDefinitionXO'
      example:
        multipleUpload: true
        format: format
        componentFields:
        - name: name
          description: description
          optional: true
          type: type
          group: group
        - name: name
          description: description
          optional: true
          type: type
          group: group
        assetFields:
        - null
        - null
    UploadFieldDefinitionXO:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        description:
          type: string
        optional:
          type: boolean
        group:
          type: string
      example:
        name: name
        description: description
        optional: true
        type: type
        group: group
    ApiPrivilegeRepositoryContentSelectorRequest:
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: The name of the privilege.  This value cannot be changed.
        description:
          type: string
        actions:
          type: array
          description: A collection of actions to associate with the privilege, using
            BREAD syntax (browse,read,edit,add,delete,all) as well as 'run' for script
            privileges.
          items:
            type: string
            enum:
            - READ
            - BROWSE
            - EDIT
            - ADD
            - DELETE
            - RUN
            - ASSOCIATE
            - DISASSOCIATE
            - ALL
        format:
          type: string
          description: The repository format (i.e 'nuget', 'npm') this privilege will
            grant access to (or * for all).
        repository:
          type: string
          description: The name of the repository this privilege will grant access
            to (or * for all).
        contentSelector:
          type: string
          description: The name of a content selector that will be used to grant access
            to content via this privilege.
    ApiPrivilegeRepositoryAdminRequest:
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: The name of the privilege.  This value cannot be changed.
        description:
          type: string
        actions:
          type: array
          description: A collection of actions to associate with the privilege, using
            BREAD syntax (browse,read,edit,add,delete,all) as well as 'run' for script
            privileges.
          items:
            type: string
            enum:
            - READ
            - BROWSE
            - EDIT
            - ADD
            - DELETE
            - RUN
            - ASSOCIATE
            - DISASSOCIATE
            - ALL
        format:
          type: string
          description: The repository format (i.e 'nuget', 'npm') this privilege will
            grant access to (or * for all).
        repository:
          type: string
          description: The name of the repository this privilege will grant access
            to (or * for all).
    ApiPrivilegeRepositoryViewRequest:
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: The name of the privilege.  This value cannot be changed.
        description:
          type: string
        actions:
          type: array
          description: A collection of actions to associate with the privilege, using
            BREAD syntax (browse,read,edit,add,delete,all) as well as 'run' for script
            privileges.
          items:
            type: string
            enum:
            - READ
            - BROWSE
            - EDIT
            - ADD
            - DELETE
            - RUN
            - ASSOCIATE
            - DISASSOCIATE
            - ALL
        format:
          type: string
          description: The repository format (i.e 'nuget', 'npm') this privilege will
            grant access to (or * for all).
        repository:
          type: string
          description: The name of the repository this privilege will grant access
            to (or * for all).
    GroupAttributes:
      type: object
      properties:
        memberNames:
          type: array
          description: Member repositories' names
          items:
            type: string
      example:
        memberNames:
        - memberNames
        - memberNames
    MavenGroupRepositoryApiRequest:
      required:
      - group
      - name
      - online
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/StorageAttributes'
        group:
          $ref: '#/components/schemas/GroupAttributes'
    StorageAttributes:
      required:
      - strictContentTypeValidation
      type: object
      properties:
        blobStoreName:
          type: string
          description: Blob store used to store repository contents
          example: default
        strictContentTypeValidation:
          type: boolean
          description: Whether to validate uploaded content's MIME type appropriate
            for the repository format
          example: true
      example:
        strictContentTypeValidation: true
        blobStoreName: default
    SimpleApiGroupRepository:
      required:
      - group
      - online
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/StorageAttributes'
        group:
          $ref: '#/components/schemas/GroupAttributes'
      example:
        name: internal
        online: true
        storage:
          strictContentTypeValidation: true
          blobStoreName: default
        group:
          memberNames:
          - memberNames
          - memberNames
    CleanupPolicyAttributes:
      type: object
      properties:
        policyNames:
          type: array
          description: Components that match any of the applied policies will be deleted
          items:
            type: string
      example:
        policyNames:
        - policyNames
        - policyNames
    HostedStorageAttributes:
      required:
      - strictContentTypeValidation
      - writePolicy
      type: object
      properties:
        blobStoreName:
          type: string
          description: Blob store used to store repository contents
          example: default
        strictContentTypeValidation:
          type: boolean
          description: Whether to validate uploaded content's MIME type appropriate
            for the repository format
          example: true
        writePolicy:
          type: string
          description: Controls if deployments of and updates to assets are allowed
          example: allow_once
          enum:
          - allow
          - allow_once
          - deny
      example:
        strictContentTypeValidation: true
        writePolicy: allow_once
        blobStoreName: default
    MavenAttributes:
      type: object
      properties:
        versionPolicy:
          type: string
          description: What type of artifacts does this repository store?
          example: MIXED
          enum:
          - RELEASE
          - SNAPSHOT
          - MIXED
        layoutPolicy:
          type: string
          description: Validate that all paths are maven artifact or metadata paths
          example: STRICT
          enum:
          - STRICT
          - PERMISSIVE
      example:
        layoutPolicy: STRICT
        versionPolicy: MIXED
    MavenHostedApiRepository:
      required:
      - maven
      - online
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/HostedStorageAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        maven:
          $ref: '#/components/schemas/MavenAttributes'
      example:
        cleanup:
          policyNames:
          - policyNames
          - policyNames
        maven:
          layoutPolicy: STRICT
          versionPolicy: MIXED
        name: internal
        online: true
        storage:
          strictContentTypeValidation: true
          writePolicy: allow_once
          blobStoreName: default
    MavenHostedRepositoryApiRequest:
      required:
      - maven
      - name
      - online
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/HostedStorageAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        maven:
          $ref: '#/components/schemas/MavenAttributes'
    HttpClientAttributes:
      required:
      - autoBlock
      - blocked
      type: object
      properties:
        blocked:
          type: boolean
          description: Whether to block outbound connections on the repository
          example: false
        autoBlock:
          type: boolean
          description: Whether to auto-block outbound connections if remote peer is
            detected as unreachable/unresponsive
          example: true
        connection:
          $ref: '#/components/schemas/HttpClientConnectionAttributes'
        authentication:
          $ref: '#/components/schemas/HttpClientConnectionAuthenticationAttributes'
      example:
        blocked: false
        autoBlock: true
        connection:
          userAgentSuffix: userAgentSuffix
          retries: 0
          enableCircularRedirects: false
          enableCookies: false
          timeout: 60
        authentication:
          ntlmDomain: ntlmDomain
          type: username
          ntlmHost: ntlmHost
          username: username
    HttpClientConnectionAttributes:
      type: object
      properties:
        retries:
          maximum: 10.0
          minimum: 0
          type: integer
          description: Total retries if the initial connection attempt suffers a timeout
          format: int32
          example: 0
        userAgentSuffix:
          type: string
          description: Custom fragment to append to User-Agent header in HTTP requests
        timeout:
          maximum: 3600.0
          minimum: 1
          type: integer
          description: Seconds to wait for activity before stopping and retrying the
            connection
          format: int32
          example: 60
        enableCircularRedirects:
          type: boolean
          description: Whether to enable redirects to the same location (may be required
            by some servers)
          example: false
        enableCookies:
          type: boolean
          description: Whether to allow cookies to be stored and used
          example: false
      example:
        userAgentSuffix: userAgentSuffix
        retries: 0
        enableCircularRedirects: false
        enableCookies: false
        timeout: 60
    HttpClientConnectionAuthenticationAttributes:
      type: object
      properties:
        type:
          type: string
          description: Authentication type
          enum:
          - username
          - ntlm
        username:
          type: string
        ntlmHost:
          type: string
        ntlmDomain:
          type: string
      example:
        ntlmDomain: ntlmDomain
        type: username
        ntlmHost: ntlmHost
        username: username
    MavenProxyApiRepository:
      required:
      - httpClient
      - maven
      - negativeCache
      - online
      - proxy
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/StorageAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributes'
        routingRuleName:
          type: string
          description: The name of the routing rule assigned to this repository
        maven:
          $ref: '#/components/schemas/MavenAttributes'
      example:
        proxy:
          contentMaxAge: 1440
          metadataMaxAge: 1440
          remoteUrl: https://remote.repository.com
        httpClient:
          blocked: false
          autoBlock: true
          connection:
            userAgentSuffix: userAgentSuffix
            retries: 0
            enableCircularRedirects: false
            enableCookies: false
            timeout: 60
          authentication:
            ntlmDomain: ntlmDomain
            type: username
            ntlmHost: ntlmHost
            username: username
        negativeCache:
          timeToLive: 1440
          enabled: true
        routingRuleName: routingRuleName
        cleanup:
          policyNames:
          - policyNames
          - policyNames
        maven:
          layoutPolicy: STRICT
          versionPolicy: MIXED
        name: internal
        online: true
        storage:
          strictContentTypeValidation: true
          blobStoreName: default
    NegativeCacheAttributes:
      required:
      - enabled
      - timeToLive
      type: object
      properties:
        enabled:
          type: boolean
          description: Whether to cache responses for content not present in the proxied
            repository
          example: true
        timeToLive:
          type: integer
          description: How long to cache the fact that a file was not found in the
            repository (in minutes)
          format: int32
          example: 1440
      example:
        timeToLive: 1440
        enabled: true
    ProxyAttributes:
      required:
      - contentMaxAge
      - metadataMaxAge
      type: object
      properties:
        remoteUrl:
          type: string
          description: Location of the remote repository being proxied
          example: https://remote.repository.com
        contentMaxAge:
          type: integer
          description: How long to cache artifacts before rechecking the remote repository
            (in minutes)
          format: int32
          example: 1440
        metadataMaxAge:
          type: integer
          description: How long to cache metadata before rechecking the remote repository
            (in minutes)
          format: int32
          example: 1440
      example:
        contentMaxAge: 1440
        metadataMaxAge: 1440
        remoteUrl: https://remote.repository.com
    MavenProxyRepositoryApiRequest:
      required:
      - httpClient
      - maven
      - name
      - negativeCache
      - online
      - proxy
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/StorageAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributes'
        routingRule:
          type: string
        maven:
          $ref: '#/components/schemas/MavenAttributes'
    ApiPrivilegeScriptRequest:
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: The name of the privilege.  This value cannot be changed.
        description:
          type: string
        actions:
          type: array
          description: A collection of actions to associate with the privilege, using
            BREAD syntax (browse,read,edit,add,delete,all) as well as 'run' for script
            privileges.
          items:
            type: string
            enum:
            - READ
            - BROWSE
            - EDIT
            - ADD
            - DELETE
            - RUN
            - ASSOCIATE
            - DISASSOCIATE
            - ALL
        scriptName:
          type: string
          description: The name of a script to give access to.
    ScriptXO:
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        content:
          type: string
        type:
          type: string
      example:
        name: name
        type: type
        content: content
    ScriptResultXO:
      type: object
      properties:
        name:
          type: string
        result:
          type: string
      example:
        result: result
        name: name
    S3BlobStoreApiAdvancedBucketConnection:
      type: object
      properties:
        endpoint:
          type: string
          description: A custom endpoint URL for third party object stores using the
            S3 API.
        signerType:
          type: string
          description: An API signature version which may be required for third party
            object stores using the S3 API.
        forcePathStyle:
          type: boolean
          description: Setting this flag will result in path-style access being used
            for all requests.
    S3BlobStoreApiBucket:
      required:
      - expiration
      - name
      - region
      type: object
      properties:
        region:
          type: string
          description: The AWS region to create a new S3 bucket in or an existing
            S3 bucket's region
        name:
          type: string
          description: The name of the S3 bucket
        prefix:
          type: string
          description: The S3 blob store (i.e S3 object) key prefix
        expiration:
          type: integer
          description: How many days until deleted blobs are finally removed from
            the S3 bucket (-1 to disable)
          format: int32
    S3BlobStoreApiBucketConfiguration:
      required:
      - bucket
      type: object
      properties:
        bucket:
          $ref: '#/components/schemas/S3BlobStoreApiBucket'
        encryption:
          $ref: '#/components/schemas/S3BlobStoreApiEncryption'
        bucketSecurity:
          $ref: '#/components/schemas/S3BlobStoreApiBucketSecurity'
        advancedBucketConnection:
          $ref: '#/components/schemas/S3BlobStoreApiAdvancedBucketConnection'
    S3BlobStoreApiBucketSecurity:
      type: object
      properties:
        accessKeyId:
          type: string
          description: An IAM access key ID for granting access to the S3 bucket
        secretAccessKey:
          type: string
          description: The secret access key associated with the specified IAM access
            key ID
        role:
          type: string
          description: An IAM role to assume in order to access the S3 bucket
        sessionToken:
          type: string
          description: An AWS STS session token associated with temporary security
            credentials which grant access to the S3 bucket
    S3BlobStoreApiEncryption:
      type: object
      properties:
        encryptionType:
          type: string
          description: The type of S3 server side encryption to use.
          enum:
          - s3ManagedEncryption
          - kmsManagedEncryption
        encryptionKey:
          type: string
          description: The encryption key.
    S3BlobStoreApiModel:
      required:
      - bucketConfiguration
      - name
      type: object
      properties:
        name:
          type: string
          description: The name of the S3 blob store.
        softQuota:
          $ref: '#/components/schemas/BlobStoreApiSoftQuota'
        bucketConfiguration:
          $ref: '#/components/schemas/S3BlobStoreApiBucketConfiguration'
    RawAttributes:
      type: object
      properties:
        contentDisposition:
          type: string
          description: Content Disposition
          example: ATTACHMENT
          enum:
          - INLINE
          - ATTACHMENT
    RawGroupRepositoryApiRequest:
      required:
      - group
      - name
      - online
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/StorageAttributes'
        group:
          $ref: '#/components/schemas/GroupAttributes'
        raw:
          $ref: '#/components/schemas/RawAttributes'
    RawHostedRepositoryApiRequest:
      required:
      - name
      - online
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/HostedStorageAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        raw:
          $ref: '#/components/schemas/RawAttributes'
    SimpleApiHostedRepository:
      required:
      - online
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/HostedStorageAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
      example:
        cleanup:
          policyNames:
          - policyNames
          - policyNames
        name: internal
        online: true
        storage:
          strictContentTypeValidation: true
          writePolicy: allow_once
          blobStoreName: default
    RawProxyRepositoryApiRequest:
      required:
      - httpClient
      - name
      - negativeCache
      - online
      - proxy
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/StorageAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributes'
        routingRule:
          type: string
        raw:
          $ref: '#/components/schemas/RawAttributes'
    SimpleApiProxyRepository:
      required:
      - httpClient
      - negativeCache
      - online
      - proxy
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/StorageAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributes'
        routingRuleName:
          type: string
          description: The name of the routing rule assigned to this repository
      example:
        proxy:
          contentMaxAge: 1440
          metadataMaxAge: 1440
          remoteUrl: https://remote.repository.com
        httpClient:
          blocked: false
          autoBlock: true
          connection:
            userAgentSuffix: userAgentSuffix
            retries: 0
            enableCircularRedirects: false
            enableCookies: false
            timeout: 60
          authentication:
            ntlmDomain: ntlmDomain
            type: username
            ntlmHost: ntlmHost
            username: username
        negativeCache:
          timeToLive: 1440
          enabled: true
        routingRuleName: routingRuleName
        cleanup:
          policyNames:
          - policyNames
          - policyNames
        name: internal
        online: true
        storage:
          strictContentTypeValidation: true
          blobStoreName: default
    GroupDeployAttributes:
      type: object
      properties:
        memberNames:
          type: array
          description: Member repositories' names
          items:
            type: string
        writableMember:
          type: string
          description: 'Pro-only: This field is for the Group Deployment feature available
            in NXRM Pro.'
      example:
        memberNames:
        - memberNames
        - memberNames
        writableMember: writableMember
    SimpleApiGroupDeployRepository:
      required:
      - group
      - online
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          readOnly: true
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          readOnly: true
          example: true
        storage:
          $ref: '#/components/schemas/StorageAttributes'
        group:
          $ref: '#/components/schemas/GroupDeployAttributes'
      example:
        name: internal
        online: true
        storage:
          strictContentTypeValidation: true
          blobStoreName: default
        group:
          memberNames:
          - memberNames
          - memberNames
          writableMember: writableMember
    NpmGroupRepositoryApiRequest:
      required:
      - group
      - name
      - online
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/StorageAttributes'
        group:
          $ref: '#/components/schemas/GroupDeployAttributes'
    NpmHostedRepositoryApiRequest:
      required:
      - name
      - online
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/HostedStorageAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
    NpmAttributes:
      required:
      - removeNonCataloged
      type: object
      properties:
        removeNonCataloged:
          type: boolean
          description: Remove Non-Cataloged Versions
          example: true
      example:
        removeNonCataloged: true
    NpmProxyApiRepository:
      required:
      - httpClient
      - negativeCache
      - online
      - proxy
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/StorageAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributes'
        routingRuleName:
          type: string
          description: The name of the routing rule assigned to this repository
        npm:
          $ref: '#/components/schemas/NpmAttributes'
      example:
        proxy:
          contentMaxAge: 1440
          metadataMaxAge: 1440
          remoteUrl: https://remote.repository.com
        httpClient:
          blocked: false
          autoBlock: true
          connection:
            userAgentSuffix: userAgentSuffix
            retries: 0
            enableCircularRedirects: false
            enableCookies: false
            timeout: 60
          authentication:
            ntlmDomain: ntlmDomain
            type: username
            ntlmHost: ntlmHost
            username: username
        negativeCache:
          timeToLive: 1440
          enabled: true
        routingRuleName: routingRuleName
        cleanup:
          policyNames:
          - policyNames
          - policyNames
        name: internal
        online: true
        npm:
          removeNonCataloged: true
        storage:
          strictContentTypeValidation: true
          blobStoreName: default
    NpmProxyRepositoryApiRequest:
      required:
      - httpClient
      - name
      - negativeCache
      - online
      - proxy
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/StorageAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributes'
        routingRule:
          type: string
        npm:
          $ref: '#/components/schemas/NpmAttributes'
    HelmHostedRepositoryApiRequest:
      required:
      - name
      - online
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/HostedStorageAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
    HelmProxyRepositoryApiRequest:
      required:
      - httpClient
      - name
      - negativeCache
      - online
      - proxy
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/StorageAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributes'
        routingRule:
          type: string
    PypiGroupRepositoryApiRequest:
      required:
      - group
      - name
      - online
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/StorageAttributes'
        group:
          $ref: '#/components/schemas/GroupAttributes'
    PypiHostedRepositoryApiRequest:
      required:
      - name
      - online
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/HostedStorageAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
    PypiProxyRepositoryApiRequest:
      required:
      - httpClient
      - name
      - negativeCache
      - online
      - proxy
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/StorageAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributes'
        routingRule:
          type: string
    ApiEmailConfiguration:
      required:
      - port
      type: object
      properties:
        enabled:
          type: boolean
        host:
          type: string
        port:
          type: integer
          format: int32
        username:
          type: string
        password:
          type: string
        fromAddress:
          type: string
          example: nexus@example.org
        subjectPrefix:
          type: string
          description: A prefix to add to all email subjects to aid in identifying
            automated emails
        startTlsEnabled:
          type: boolean
          description: Enable STARTTLS Support for Insecure Connections
        startTlsRequired:
          type: boolean
          description: Require STARTTLS Support
        sslOnConnectEnabled:
          type: boolean
          description: Enable SSL/TLS Encryption upon Connection
        sslServerIdentityCheckEnabled:
          type: boolean
          description: Verify the server certificate when using TLS or SSL
        nexusTrustStoreEnabled:
          type: boolean
          description: Use the Nexus Repository Manager's certificate truststore
      example:
        startTlsEnabled: true
        password: password
        port: 0
        sslServerIdentityCheckEnabled: true
        host: host
        fromAddress: nexus@example.org
        startTlsRequired: true
        subjectPrefix: subjectPrefix
        enabled: true
        username: username
        sslOnConnectEnabled: true
        nexusTrustStoreEnabled: true
    ApiEmailValidation:
      type: object
      properties:
        success:
          type: boolean
        reason:
          type: string
      example:
        reason: reason
        success: true
    Result:
      type: object
      properties:
        healthy:
          type: boolean
        message:
          type: string
        error:
          $ref: '#/components/schemas/Throwable'
        details:
          type: object
          additionalProperties:
            type: object
            properties: {}
            example: {}
        time:
          type: integer
          format: int64
        duration:
          type: integer
          format: int64
        timestamp:
          type: string
      example:
        duration: 1
        healthy: true
        details:
          key: {}
        time: 6
        message: message
        error:
          localizedMessage: localizedMessage
          cause: null
          stackTrace:
          - fileName: fileName
            nativeMethod: true
            methodName: methodName
            className: className
            lineNumber: 0
          - fileName: fileName
            nativeMethod: true
            methodName: methodName
            className: className
            lineNumber: 0
          suppressed:
          - null
          - null
          message: message
        timestamp: timestamp
    StackTraceElement:
      type: object
      properties:
        methodName:
          type: string
        fileName:
          type: string
        lineNumber:
          type: integer
          format: int32
        className:
          type: string
        nativeMethod:
          type: boolean
      example:
        fileName: fileName
        nativeMethod: true
        methodName: methodName
        className: className
        lineNumber: 0
    Throwable:
      type: object
      properties:
        cause:
          $ref: '#/components/schemas/Throwable'
        stackTrace:
          type: array
          items:
            $ref: '#/components/schemas/StackTraceElement'
        message:
          type: string
        localizedMessage:
          type: string
        suppressed:
          type: array
          items:
            $ref: '#/components/schemas/Throwable'
      example:
        localizedMessage: localizedMessage
        cause: null
        stackTrace:
        - fileName: fileName
          nativeMethod: true
          methodName: methodName
          className: className
          lineNumber: 0
        - fileName: fileName
          nativeMethod: true
          methodName: methodName
          className: className
          lineNumber: 0
        suppressed:
        - null
        - null
        message: message
    Request:
      type: object
      properties:
        systemInformation:
          type: boolean
        threadDump:
          type: boolean
        metrics:
          type: boolean
        configuration:
          type: boolean
        security:
          type: boolean
        log:
          type: boolean
        taskLog:
          type: boolean
        auditLog:
          type: boolean
        jmx:
          type: boolean
        limitFileSizes:
          type: boolean
        limitZipSize:
          type: boolean
    SupportZipXO:
      type: object
      properties:
        file:
          type: string
        name:
          type: string
        size:
          type: string
        truncated:
          type: boolean
      example:
        file: file
        size: size
        name: name
        truncated: true
    ReadLdapServerXo:
      required:
      - authScheme
      - connectionRetryDelaySeconds
      - connectionTimeoutSeconds
      - groupType
      - host
      - maxIncidentsCount
      - name
      - port
      - protocol
      - searchBase
      type: object
      properties:
        name:
          type: string
          description: LDAP server name
        protocol:
          type: string
          description: LDAP server connection Protocol to use
          enum:
          - ldap
          - ldaps
        useTrustStore:
          type: boolean
          description: Whether to use certificates stored in Nexus Repository Manager's
            truststore
        host:
          type: string
          description: LDAP server connection hostname
        port:
          type: integer
          description: LDAP server connection port to use
          format: int32
          example: 636
        searchBase:
          type: string
          description: LDAP location to be added to the connection URL
          example: dc=example,dc=com
        authScheme:
          type: string
          description: Authentication scheme used for connecting to LDAP server
          enum:
          - NONE
          - SIMPLE
          - DIGEST_MD5
          - CRAM_MD5
        authRealm:
          type: string
          description: The SASL realm to bind to. Required if authScheme is CRAM_MD5
            or DIGEST_MD5
          example: example.com
        authUsername:
          type: string
          description: This must be a fully qualified username if simple authentication
            is used. Required if authScheme other than none.
        connectionTimeoutSeconds:
          maximum: 3600.0
          minimum: 1
          type: integer
          description: How long to wait before timeout
          format: int32
          example: 1
        connectionRetryDelaySeconds:
          minimum: 0
          type: integer
          description: How long to wait before retrying
          format: int32
        maxIncidentsCount:
          minimum: 0
          type: integer
          description: How many retry attempts
          format: int32
        userBaseDn:
          type: string
          description: The relative DN where user objects are found (e.g. ou=people).
            This value will have the Search base DN value appended to form the full
            User search base DN.
          example: ou=people
        userSubtree:
          type: boolean
          description: Are users located in structures below the user base DN?
        userObjectClass:
          type: string
          description: LDAP class for user objects
          example: inetOrgPerson
        userLdapFilter:
          type: string
          description: LDAP search filter to limit user search
          example: (|(mail=*@example.com)(uid=dom*))
        userIdAttribute:
          type: string
          description: This is used to find a user given its user ID
          example: uid
        userRealNameAttribute:
          type: string
          description: This is used to find a real name given the user ID
          example: cn
        userEmailAddressAttribute:
          type: string
          description: This is used to find an email address given the user ID
          example: mail
        userPasswordAttribute:
          type: string
          description: If this field is blank the user will be authenticated against
            a bind with the LDAP server
        ldapGroupsAsRoles:
          type: boolean
          description: Denotes whether LDAP assigned roles are used as Nexus Repository
            Manager roles
        groupType:
          type: string
          description: 'Defines a type of groups used: static (a group contains a
            list of users) or dynamic (a user contains a list of groups). Required
            if ldapGroupsAsRoles is true.'
          enum:
          - static
          - dynamic
        groupBaseDn:
          type: string
          description: The relative DN where group objects are found (e.g. ou=Group).
            This value will have the Search base DN value appended to form the full
            Group search base DN.
          example: ou=Group
        groupSubtree:
          type: boolean
          description: Are groups located in structures below the group base DN
        groupObjectClass:
          maxLength: 0
          minLength: 0
          type: string
          description: LDAP class for group objects. Required if groupType is static
          example: posixGroup
        groupIdAttribute:
          maxLength: 0
          minLength: 0
          type: string
          description: This field specifies the attribute of the Object class that
            defines the Group ID. Required if groupType is static
          example: cn
        groupMemberAttribute:
          maxLength: 0
          minLength: 0
          type: string
          description: LDAP attribute containing the usernames for the group. Required
            if groupType is static
          example: memberUid
        groupMemberFormat:
          maxLength: 0
          minLength: 0
          type: string
          description: The format of user ID stored in the group member attribute.
            Required if groupType is static
          example: uid=${username},ou=people,dc=example,dc=com
        userMemberOfAttribute:
          maxLength: 0
          minLength: 0
          type: string
          description: Set this to the attribute used to store the attribute which
            holds groups DN in the user object. Required if groupType is dynamic
          example: memberOf
        id:
          type: string
          description: LDAP server ID
        order:
          type: integer
          description: Order number in which the server is being used when looking
            for a user
          format: int32
    CreateLdapServerXo:
      required:
      - authPassword
      - authScheme
      - connectionRetryDelaySeconds
      - connectionTimeoutSeconds
      - groupType
      - host
      - maxIncidentsCount
      - name
      - port
      - protocol
      - searchBase
      type: object
      properties:
        name:
          type: string
          description: LDAP server name
        protocol:
          type: string
          description: LDAP server connection Protocol to use
          enum:
          - ldap
          - ldaps
        useTrustStore:
          type: boolean
          description: Whether to use certificates stored in Nexus Repository Manager's
            truststore
        host:
          type: string
          description: LDAP server connection hostname
        port:
          type: integer
          description: LDAP server connection port to use
          format: int32
          example: 636
        searchBase:
          type: string
          description: LDAP location to be added to the connection URL
          example: dc=example,dc=com
        authScheme:
          type: string
          description: Authentication scheme used for connecting to LDAP server
          enum:
          - NONE
          - SIMPLE
          - DIGEST_MD5
          - CRAM_MD5
        authRealm:
          type: string
          description: The SASL realm to bind to. Required if authScheme is CRAM_MD5
            or DIGEST_MD5
          example: example.com
        authUsername:
          type: string
          description: This must be a fully qualified username if simple authentication
            is used. Required if authScheme other than none.
        connectionTimeoutSeconds:
          maximum: 3600.0
          minimum: 1
          type: integer
          description: How long to wait before timeout
          format: int32
          example: 1
        connectionRetryDelaySeconds:
          minimum: 0
          type: integer
          description: How long to wait before retrying
          format: int32
        maxIncidentsCount:
          minimum: 0
          type: integer
          description: How many retry attempts
          format: int32
        userBaseDn:
          type: string
          description: The relative DN where user objects are found (e.g. ou=people).
            This value will have the Search base DN value appended to form the full
            User search base DN.
          example: ou=people
        userSubtree:
          type: boolean
          description: Are users located in structures below the user base DN?
        userObjectClass:
          type: string
          description: LDAP class for user objects
          example: inetOrgPerson
        userLdapFilter:
          type: string
          description: LDAP search filter to limit user search
          example: (|(mail=*@example.com)(uid=dom*))
        userIdAttribute:
          type: string
          description: This is used to find a user given its user ID
          example: uid
        userRealNameAttribute:
          type: string
          description: This is used to find a real name given the user ID
          example: cn
        userEmailAddressAttribute:
          type: string
          description: This is used to find an email address given the user ID
          example: mail
        userPasswordAttribute:
          type: string
          description: If this field is blank the user will be authenticated against
            a bind with the LDAP server
        ldapGroupsAsRoles:
          type: boolean
          description: Denotes whether LDAP assigned roles are used as Nexus Repository
            Manager roles
        groupType:
          type: string
          description: 'Defines a type of groups used: static (a group contains a
            list of users) or dynamic (a user contains a list of groups). Required
            if ldapGroupsAsRoles is true.'
          enum:
          - static
          - dynamic
        groupBaseDn:
          type: string
          description: The relative DN where group objects are found (e.g. ou=Group).
            This value will have the Search base DN value appended to form the full
            Group search base DN.
          example: ou=Group
        groupSubtree:
          type: boolean
          description: Are groups located in structures below the group base DN
        groupObjectClass:
          maxLength: 0
          minLength: 0
          type: string
          description: LDAP class for group objects. Required if groupType is static
          example: posixGroup
        groupIdAttribute:
          maxLength: 0
          minLength: 0
          type: string
          description: This field specifies the attribute of the Object class that
            defines the Group ID. Required if groupType is static
          example: cn
        groupMemberAttribute:
          maxLength: 0
          minLength: 0
          type: string
          description: LDAP attribute containing the usernames for the group. Required
            if groupType is static
          example: memberUid
        groupMemberFormat:
          maxLength: 0
          minLength: 0
          type: string
          description: The format of user ID stored in the group member attribute.
            Required if groupType is static
          example: uid=${username},ou=people,dc=example,dc=com
        userMemberOfAttribute:
          maxLength: 0
          minLength: 0
          type: string
          description: Set this to the attribute used to store the attribute which
            holds groups DN in the user object. Required if groupType is dynamic
          example: memberOf
        authPassword:
          type: string
          description: The password to bind with. Required if authScheme other than
            none.
    UpdateLdapServerXo:
      required:
      - authPassword
      - authScheme
      - connectionRetryDelaySeconds
      - connectionTimeoutSeconds
      - groupType
      - host
      - maxIncidentsCount
      - name
      - port
      - protocol
      - searchBase
      type: object
      properties:
        name:
          type: string
          description: LDAP server name
        protocol:
          type: string
          description: LDAP server connection Protocol to use
          enum:
          - ldap
          - ldaps
        useTrustStore:
          type: boolean
          description: Whether to use certificates stored in Nexus Repository Manager's
            truststore
        host:
          type: string
          description: LDAP server connection hostname
        port:
          type: integer
          description: LDAP server connection port to use
          format: int32
          example: 636
        searchBase:
          type: string
          description: LDAP location to be added to the connection URL
          example: dc=example,dc=com
        authScheme:
          type: string
          description: Authentication scheme used for connecting to LDAP server
          enum:
          - NONE
          - SIMPLE
          - DIGEST_MD5
          - CRAM_MD5
        authRealm:
          type: string
          description: The SASL realm to bind to. Required if authScheme is CRAM_MD5
            or DIGEST_MD5
          example: example.com
        authUsername:
          type: string
          description: This must be a fully qualified username if simple authentication
            is used. Required if authScheme other than none.
        connectionTimeoutSeconds:
          maximum: 3600.0
          minimum: 1
          type: integer
          description: How long to wait before timeout
          format: int32
          example: 1
        connectionRetryDelaySeconds:
          minimum: 0
          type: integer
          description: How long to wait before retrying
          format: int32
        maxIncidentsCount:
          minimum: 0
          type: integer
          description: How many retry attempts
          format: int32
        userBaseDn:
          type: string
          description: The relative DN where user objects are found (e.g. ou=people).
            This value will have the Search base DN value appended to form the full
            User search base DN.
          example: ou=people
        userSubtree:
          type: boolean
          description: Are users located in structures below the user base DN?
        userObjectClass:
          type: string
          description: LDAP class for user objects
          example: inetOrgPerson
        userLdapFilter:
          type: string
          description: LDAP search filter to limit user search
          example: (|(mail=*@example.com)(uid=dom*))
        userIdAttribute:
          type: string
          description: This is used to find a user given its user ID
          example: uid
        userRealNameAttribute:
          type: string
          description: This is used to find a real name given the user ID
          example: cn
        userEmailAddressAttribute:
          type: string
          description: This is used to find an email address given the user ID
          example: mail
        userPasswordAttribute:
          type: string
          description: If this field is blank the user will be authenticated against
            a bind with the LDAP server
        ldapGroupsAsRoles:
          type: boolean
          description: Denotes whether LDAP assigned roles are used as Nexus Repository
            Manager roles
        groupType:
          type: string
          description: 'Defines a type of groups used: static (a group contains a
            list of users) or dynamic (a user contains a list of groups). Required
            if ldapGroupsAsRoles is true.'
          enum:
          - static
          - dynamic
        groupBaseDn:
          type: string
          description: The relative DN where group objects are found (e.g. ou=Group).
            This value will have the Search base DN value appended to form the full
            Group search base DN.
          example: ou=Group
        groupSubtree:
          type: boolean
          description: Are groups located in structures below the group base DN
        groupObjectClass:
          maxLength: 0
          minLength: 0
          type: string
          description: LDAP class for group objects. Required if groupType is static
          example: posixGroup
        groupIdAttribute:
          maxLength: 0
          minLength: 0
          type: string
          description: This field specifies the attribute of the Object class that
            defines the Group ID. Required if groupType is static
          example: cn
        groupMemberAttribute:
          maxLength: 0
          minLength: 0
          type: string
          description: LDAP attribute containing the usernames for the group. Required
            if groupType is static
          example: memberUid
        groupMemberFormat:
          maxLength: 0
          minLength: 0
          type: string
          description: The format of user ID stored in the group member attribute.
            Required if groupType is static
          example: uid=${username},ou=people,dc=example,dc=com
        userMemberOfAttribute:
          maxLength: 0
          minLength: 0
          type: string
          description: Set this to the attribute used to store the attribute which
            holds groups DN in the user object. Required if groupType is dynamic
          example: memberOf
        authPassword:
          type: string
          description: The password to bind with. Required if authScheme other than
            none.
        id:
          type: string
          description: LDAP server ID
    ApiLicenseDetailsXO:
      type: object
      properties:
        contactEmail:
          type: string
        contactCompany:
          type: string
        contactName:
          type: string
        effectiveDate:
          type: string
          format: date-time
        expirationDate:
          type: string
          format: date-time
        licenseType:
          type: string
        licensedUsers:
          type: string
        fingerprint:
          type: string
        features:
          type: string
      example:
        contactCompany: contactCompany
        licenseType: licenseType
        features: features
        contactEmail: contactEmail
        contactName: contactName
        fingerprint: fingerprint
        effectiveDate: 2000-01-23T04:56:07.000+00:00
        expirationDate: 2000-01-23T04:56:07.000+00:00
        licensedUsers: licensedUsers
    InputStream:
      type: object
    IqConnectionXo:
      required:
      - authenticationType
      type: object
      properties:
        enabled:
          type: boolean
          description: Whether to use IQ Server
        showLink:
          type: boolean
          description: Show IQ Server link in Browse menu when server is enabled
        url:
          type: string
          description: The address of your IQ Server
        authenticationType:
          type: string
          description: Authentication method
          enum:
          - USER
          - PKI
        username:
          type: string
          description: User with access to IQ Server
        password:
          type: string
          description: Credentials for the IQ Server User
        useTrustStoreForUrl:
          type: boolean
          description: Use certificates stored in the Nexus Repository Manager truststore
            to connect to IQ Server
        timeoutSeconds:
          maximum: 3600.0
          minimum: 1
          type: integer
          description: Seconds to wait for activity before stopping and retrying the
            connection. Leave blank to use the globally defined HTTP timeout.
          format: int32
        properties:
          type: string
          description: Additional properties to configure for IQ Server
    IqConnectionVerificationXo:
      type: object
      properties:
        success:
          type: boolean
        reason:
          type: string
    NugetGroupRepositoryApiRequest:
      required:
      - group
      - name
      - online
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/StorageAttributes'
        group:
          $ref: '#/components/schemas/GroupAttributes'
    NugetHostedRepositoryApiRequest:
      required:
      - name
      - online
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/HostedStorageAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
    NugetAttributes:
      type: object
      properties:
        queryCacheItemMaxAge:
          type: integer
          description: How long to cache query results from the proxied repository
            (in seconds)
          format: int32
          example: 3600
        nugetVersion:
          type: string
          description: Nuget protocol version
          example: V3
          enum:
          - V2
          - V3
      example:
        nugetVersion: V3
        queryCacheItemMaxAge: 3600
    NugetProxyApiRepository:
      required:
      - httpClient
      - negativeCache
      - nugetProxy
      - online
      - proxy
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/StorageAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributes'
        routingRuleName:
          type: string
          description: The name of the routing rule assigned to this repository
        nugetProxy:
          $ref: '#/components/schemas/NugetAttributes'
      example:
        proxy:
          contentMaxAge: 1440
          metadataMaxAge: 1440
          remoteUrl: https://remote.repository.com
        httpClient:
          blocked: false
          autoBlock: true
          connection:
            userAgentSuffix: userAgentSuffix
            retries: 0
            enableCircularRedirects: false
            enableCookies: false
            timeout: 60
          authentication:
            ntlmDomain: ntlmDomain
            type: username
            ntlmHost: ntlmHost
            username: username
        negativeCache:
          timeToLive: 1440
          enabled: true
        routingRuleName: routingRuleName
        cleanup:
          policyNames:
          - policyNames
          - policyNames
        name: internal
        online: true
        storage:
          strictContentTypeValidation: true
          blobStoreName: default
        nugetProxy:
          nugetVersion: V3
          queryCacheItemMaxAge: 3600
    NugetProxyRepositoryApiRequest:
      required:
      - httpClient
      - name
      - negativeCache
      - nugetProxy
      - online
      - proxy
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/StorageAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributes'
        routingRule:
          type: string
        nugetProxy:
          $ref: '#/components/schemas/NugetAttributes'
    RubyGemsGroupRepositoryApiRequest:
      required:
      - group
      - name
      - online
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/StorageAttributes'
        group:
          $ref: '#/components/schemas/GroupAttributes'
    RubyGemsHostedRepositoryApiRequest:
      required:
      - name
      - online
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/HostedStorageAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
    RubyGemsProxyRepositoryApiRequest:
      required:
      - httpClient
      - name
      - negativeCache
      - online
      - proxy
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/StorageAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributes'
        routingRule:
          type: string
    DockerAttributes:
      required:
      - forceBasicAuth
      - v1Enabled
      type: object
      properties:
        v1Enabled:
          type: boolean
          description: Whether to allow clients to use the V1 API to interact with
            this repository
          example: false
        forceBasicAuth:
          type: boolean
          description: Whether to force authentication (Docker Bearer Token Realm
            required if false)
          example: true
        httpPort:
          type: integer
          description: Create an HTTP connector at specified port
          format: int32
          example: 8082
        httpsPort:
          type: integer
          description: Create an HTTPS connector at specified port
          format: int32
          example: 8083
      example:
        httpPort: 8082
        v1Enabled: false
        forceBasicAuth: true
        httpsPort: 8083
    DockerGroupApiRepository:
      required:
      - docker
      - group
      - online
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/StorageAttributes'
        group:
          $ref: '#/components/schemas/GroupDeployAttributes'
        docker:
          $ref: '#/components/schemas/DockerAttributes'
      example:
        name: internal
        online: true
        storage:
          strictContentTypeValidation: true
          blobStoreName: default
        group:
          memberNames:
          - memberNames
          - memberNames
          writableMember: writableMember
        docker:
          httpPort: 8082
          v1Enabled: false
          forceBasicAuth: true
          httpsPort: 8083
    DockerGroupRepositoryApiRequest:
      required:
      - docker
      - group
      - name
      - online
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/StorageAttributes'
        group:
          $ref: '#/components/schemas/GroupDeployAttributes'
        docker:
          $ref: '#/components/schemas/DockerAttributes'
    DockerHostedApiRepository:
      required:
      - docker
      - online
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/HostedStorageAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        docker:
          $ref: '#/components/schemas/DockerAttributes'
      example:
        cleanup:
          policyNames:
          - policyNames
          - policyNames
        name: internal
        online: true
        storage:
          strictContentTypeValidation: true
          writePolicy: allow_once
          blobStoreName: default
        docker:
          httpPort: 8082
          v1Enabled: false
          forceBasicAuth: true
          httpsPort: 8083
    DockerHostedRepositoryApiRequest:
      required:
      - docker
      - name
      - online
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/HostedStorageAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        docker:
          $ref: '#/components/schemas/DockerAttributes'
    DockerProxyApiRepository:
      required:
      - docker
      - dockerProxy
      - httpClient
      - negativeCache
      - online
      - proxy
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/StorageAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributes'
        routingRuleName:
          type: string
          description: The name of the routing rule assigned to this repository
        docker:
          $ref: '#/components/schemas/DockerAttributes'
        dockerProxy:
          $ref: '#/components/schemas/DockerProxyAttributes'
      example:
        proxy:
          contentMaxAge: 1440
          metadataMaxAge: 1440
          remoteUrl: https://remote.repository.com
        httpClient:
          blocked: false
          autoBlock: true
          connection:
            userAgentSuffix: userAgentSuffix
            retries: 0
            enableCircularRedirects: false
            enableCookies: false
            timeout: 60
          authentication:
            ntlmDomain: ntlmDomain
            type: username
            ntlmHost: ntlmHost
            username: username
        negativeCache:
          timeToLive: 1440
          enabled: true
        routingRuleName: routingRuleName
        dockerProxy:
          indexType: HUB
          indexUrl: indexUrl
        cleanup:
          policyNames:
          - policyNames
          - policyNames
        name: internal
        online: true
        storage:
          strictContentTypeValidation: true
          blobStoreName: default
        docker:
          httpPort: 8082
          v1Enabled: false
          forceBasicAuth: true
          httpsPort: 8083
    DockerProxyAttributes:
      type: object
      properties:
        indexType:
          type: string
          description: Type of Docker Index
          example: HUB
          enum:
          - HUB
          - REGISTRY
          - CUSTOM
        indexUrl:
          type: string
          description: Url of Docker Index to use
      example:
        indexType: HUB
        indexUrl: indexUrl
    DockerProxyRepositoryApiRequest:
      required:
      - docker
      - dockerProxy
      - httpClient
      - name
      - negativeCache
      - online
      - proxy
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/StorageAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributes'
        routingRule:
          type: string
        docker:
          $ref: '#/components/schemas/DockerAttributes'
        dockerProxy:
          $ref: '#/components/schemas/DockerProxyAttributes'
    YumGroupRepositoryApiRequest:
      required:
      - group
      - name
      - online
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/StorageAttributes'
        group:
          $ref: '#/components/schemas/GroupAttributes'
    YumAttributes:
      required:
      - repodataDepth
      type: object
      properties:
        repodataDepth:
          type: integer
          description: Specifies the repository depth where repodata folder(s) are
            created
          format: int32
          example: 5
        deployPolicy:
          type: string
          description: Validate that all paths are RPMs or yum metadata
          example: STRICT
          enum:
          - PERMISSIVE
          - STRICT
      example:
        repodataDepth: 5
        deployPolicy: STRICT
    YumHostedApiRepository:
      required:
      - online
      - storage
      - yum
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/HostedStorageAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        yum:
          $ref: '#/components/schemas/YumAttributes'
      example:
        yum:
          repodataDepth: 5
          deployPolicy: STRICT
        cleanup:
          policyNames:
          - policyNames
          - policyNames
        name: internal
        online: true
        storage:
          strictContentTypeValidation: true
          writePolicy: allow_once
          blobStoreName: default
    YumHostedRepositoryApiRequest:
      required:
      - name
      - online
      - storage
      - yum
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/HostedStorageAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        yum:
          $ref: '#/components/schemas/YumAttributes'
    YumProxyRepositoryApiRequest:
      required:
      - httpClient
      - name
      - negativeCache
      - online
      - proxy
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/StorageAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributes'
        routingRule:
          type: string
    AptHostedApiRepository:
      required:
      - apt
      - aptSigning
      - online
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/HostedStorageAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        apt:
          $ref: '#/components/schemas/AptHostedRepositoriesAttributes'
        aptSigning:
          $ref: '#/components/schemas/AptSigningRepositoriesAttributes'
      example:
        apt:
          distribution: bionic
        cleanup:
          policyNames:
          - policyNames
          - policyNames
        name: internal
        online: true
        storage:
          strictContentTypeValidation: true
          writePolicy: allow_once
          blobStoreName: default
        aptSigning:
          keypair: keypair
          passphrase: passphrase
    AptHostedRepositoriesAttributes:
      type: object
      properties:
        distribution:
          type: string
          description: Distribution to fetch
          example: bionic
      example:
        distribution: bionic
    AptSigningRepositoriesAttributes:
      type: object
      properties:
        keypair:
          type: string
          description: PGP signing key pair (armored private key e.g. gpg --export-secret-key
            --armor)
        passphrase:
          type: string
          description: Passphrase to access PGP signing key
      example:
        keypair: keypair
        passphrase: passphrase
    AptHostedRepositoryApiRequest:
      required:
      - apt
      - aptSigning
      - name
      - online
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/HostedStorageAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        apt:
          $ref: '#/components/schemas/AptHostedRepositoriesAttributes'
        aptSigning:
          $ref: '#/components/schemas/AptSigningRepositoriesAttributes'
    AptProxyApiRepository:
      required:
      - apt
      - httpClient
      - negativeCache
      - online
      - proxy
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/StorageAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributes'
        routingRuleName:
          type: string
          description: The name of the routing rule assigned to this repository
        apt:
          $ref: '#/components/schemas/AptProxyRepositoriesAttributes'
      example:
        proxy:
          contentMaxAge: 1440
          metadataMaxAge: 1440
          remoteUrl: https://remote.repository.com
        httpClient:
          blocked: false
          autoBlock: true
          connection:
            userAgentSuffix: userAgentSuffix
            retries: 0
            enableCircularRedirects: false
            enableCookies: false
            timeout: 60
          authentication:
            ntlmDomain: ntlmDomain
            type: username
            ntlmHost: ntlmHost
            username: username
        negativeCache:
          timeToLive: 1440
          enabled: true
        routingRuleName: routingRuleName
        apt:
          flat: false
          distribution: bionic
        cleanup:
          policyNames:
          - policyNames
          - policyNames
        name: internal
        online: true
        storage:
          strictContentTypeValidation: true
          blobStoreName: default
    AptProxyRepositoriesAttributes:
      required:
      - flat
      type: object
      properties:
        distribution:
          type: string
          description: Distribution to fetch
          example: bionic
        flat:
          type: boolean
          description: Whether this repository is flat
          example: false
      example:
        flat: false
        distribution: bionic
    AptProxyRepositoryApiRequest:
      required:
      - apt
      - httpClient
      - name
      - negativeCache
      - online
      - proxy
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/StorageAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributes'
        routingRule:
          type: string
        apt:
          $ref: '#/components/schemas/AptProxyRepositoriesAttributes'
    CocoapodsProxyRepositoryApiRequest:
      required:
      - httpClient
      - name
      - negativeCache
      - online
      - proxy
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/StorageAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributes'
        routingRule:
          type: string
    ConanProxyRepositoryApiRequest:
      required:
      - httpClient
      - name
      - negativeCache
      - online
      - proxy
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/StorageAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributes'
        routingRule:
          type: string
    CondaProxyRepositoryApiRequest:
      required:
      - httpClient
      - name
      - negativeCache
      - online
      - proxy
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/StorageAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributes'
        routingRule:
          type: string
    GolangGroupRepositoryApiRequest:
      required:
      - group
      - name
      - online
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/StorageAttributes'
        group:
          $ref: '#/components/schemas/GroupAttributes'
    GolangProxyRepositoryApiRequest:
      required:
      - httpClient
      - name
      - negativeCache
      - online
      - proxy
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/StorageAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributes'
        routingRule:
          type: string
    P2ProxyRepositoryApiRequest:
      required:
      - httpClient
      - name
      - negativeCache
      - online
      - proxy
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/StorageAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributes'
        routingRule:
          type: string
    RGroupRepositoryApiRequest:
      required:
      - group
      - name
      - online
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/StorageAttributes'
        group:
          $ref: '#/components/schemas/GroupAttributes'
    RHostedRepositoryApiRequest:
      required:
      - name
      - online
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/HostedStorageAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
    RProxyRepositoryApiRequest:
      required:
      - httpClient
      - name
      - negativeCache
      - online
      - proxy
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/StorageAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributes'
        routingRule:
          type: string
    BowerGroupRepositoryApiRequest:
      required:
      - group
      - name
      - online
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/StorageAttributes'
        group:
          $ref: '#/components/schemas/GroupAttributes'
    BowerHostedRepositoryApiRequest:
      required:
      - name
      - online
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/HostedStorageAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
    BowerAttributes:
      required:
      - rewritePackageUrls
      type: object
      properties:
        rewritePackageUrls:
          type: boolean
          description: Whether to force Bower to retrieve packages through this proxy
            repository
          example: true
      example:
        rewritePackageUrls: true
    BowerProxyApiRepository:
      required:
      - httpClient
      - negativeCache
      - online
      - proxy
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/StorageAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributes'
        routingRuleName:
          type: string
          description: The name of the routing rule assigned to this repository
        bower:
          $ref: '#/components/schemas/BowerAttributes'
      example:
        proxy:
          contentMaxAge: 1440
          metadataMaxAge: 1440
          remoteUrl: https://remote.repository.com
        httpClient:
          blocked: false
          autoBlock: true
          connection:
            userAgentSuffix: userAgentSuffix
            retries: 0
            enableCircularRedirects: false
            enableCookies: false
            timeout: 60
          authentication:
            ntlmDomain: ntlmDomain
            type: username
            ntlmHost: ntlmHost
            username: username
        negativeCache:
          timeToLive: 1440
          enabled: true
        routingRuleName: routingRuleName
        cleanup:
          policyNames:
          - policyNames
          - policyNames
        name: internal
        online: true
        storage:
          strictContentTypeValidation: true
          blobStoreName: default
        bower:
          rewritePackageUrls: true
    BowerProxyRepositoryApiRequest:
      required:
      - httpClient
      - name
      - negativeCache
      - online
      - proxy
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/StorageAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributes'
        routingRule:
          type: string
        bower:
          $ref: '#/components/schemas/BowerAttributes'
    GitLfsHostedRepositoryApiRequest:
      required:
      - name
      - online
      - storage
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
          description: A unique identifier for this repository
          example: internal
        online:
          type: boolean
          description: Whether this repository accepts incoming requests
          example: true
        storage:
          $ref: '#/components/schemas/HostedStorageAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
    body:
      properties:
        r.asset:
          type: string
          description: 'r Asset '
          format: binary
        r.asset.pathId:
          type: string
          description: r Asset  Package Path
        apt.asset:
          type: string
          description: 'apt Asset '
          format: binary
        yum.directory:
          type: string
          description: yum Directory
        yum.asset:
          type: string
          description: 'yum Asset '
          format: binary
        yum.asset.filename:
          type: string
          description: yum Asset  Filename
        docker.asset:
          type: string
          description: 'docker Asset '
          format: binary
        rubygems.asset:
          type: string
          description: 'rubygems Asset '
          format: binary
        nuget.asset:
          type: string
          description: 'nuget Asset '
          format: binary
        pypi.asset:
          type: string
          description: 'pypi Asset '
          format: binary
        helm.asset:
          type: string
          description: 'helm Asset '
          format: binary
        npm.asset:
          type: string
          description: 'npm Asset '
          format: binary
        raw.directory:
          type: string
          description: raw Directory
        raw.asset1:
          type: string
          description: raw Asset 1
          format: binary
        raw.asset1.filename:
          type: string
          description: raw Asset 1 Filename
        raw.asset2:
          type: string
          description: raw Asset 2
          format: binary
        raw.asset2.filename:
          type: string
          description: raw Asset 2 Filename
        raw.asset3:
          type: string
          description: raw Asset 3
          format: binary
        raw.asset3.filename:
          type: string
          description: raw Asset 3 Filename
        maven2.groupId:
          type: string
          description: maven2 Group ID
        maven2.artifactId:
          type: string
          description: maven2 Artifact ID
        maven2.version:
          type: string
          description: maven2 Version
        maven2.generate-pom:
          type: boolean
          description: maven2 Generate a POM file with these coordinates
        maven2.packaging:
          type: string
          description: maven2 Packaging
        maven2.asset1:
          type: string
          description: maven2 Asset 1
          format: binary
        maven2.asset1.classifier:
          type: string
          description: maven2 Asset 1 Classifier
        maven2.asset1.extension:
          type: string
          description: maven2 Asset 1 Extension
        maven2.asset2:
          type: string
          description: maven2 Asset 2
          format: binary
        maven2.asset2.classifier:
          type: string
          description: maven2 Asset 2 Classifier
        maven2.asset2.extension:
          type: string
          description: maven2 Asset 2 Extension
        maven2.asset3:
          type: string
          description: maven2 Asset 3
          format: binary
        maven2.asset3.classifier:
          type: string
          description: maven2 Asset 3 Classifier
        maven2.asset3.extension:
          type: string
          description: maven2 Asset 3 Extension
x-original-swagger-version: "2.0"
