
/*
 * Nexus Repository Manager REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 3.29.0-02
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package nexus

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type SearchApiService service
/*
SearchApiService Search components
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *SearchApiSearchOpts - Optional Parameters:
     * @param "ContinuationToken" (optional.String) -  A token returned by a prior request. If present, the next page of results are returned
     * @param "Sort" (optional.String) -  The field to sort the results against, if left empty, a sort based on match weight will be used.
     * @param "Direction" (optional.String) -  The direction to sort records in, defaults to ascending (&#x27;asc&#x27;) for all sort fields, except version, which defaults to descending (&#x27;desc&#x27;)
     * @param "Timeout" (optional.Int32) -  How long to wait for search results in seconds. If this value is not provided, the system default timeout will be used.
     * @param "Q" (optional.String) -  Query by keyword
     * @param "Repository" (optional.String) -  Repository name
     * @param "Format" (optional.String) -  Query by format
     * @param "Group" (optional.String) -  Component group
     * @param "Name" (optional.String) -  Component name
     * @param "Version" (optional.String) -  Component version
     * @param "Md5" (optional.String) -  Specific MD5 hash of component&#x27;s asset
     * @param "Sha1" (optional.String) -  Specific SHA-1 hash of component&#x27;s asset
     * @param "Sha256" (optional.String) -  Specific SHA-256 hash of component&#x27;s asset
     * @param "Sha512" (optional.String) -  Specific SHA-512 hash of component&#x27;s asset
     * @param "Prerelease" (optional.String) -  Prerelease version flag
     * @param "ConanBaseVersion" (optional.String) -  baseVersion
     * @param "ConanChannel" (optional.String) -  channel
     * @param "DockerImageName" (optional.String) -  Docker image name
     * @param "DockerImageTag" (optional.String) -  Docker image tag
     * @param "DockerLayerId" (optional.String) -  Docker layer ID
     * @param "DockerContentDigest" (optional.String) -  Docker content digest
     * @param "MavenGroupId" (optional.String) -  Maven groupId
     * @param "MavenArtifactId" (optional.String) -  Maven artifactId
     * @param "MavenBaseVersion" (optional.String) -  Maven base version
     * @param "MavenExtension" (optional.String) -  Maven extension of component&#x27;s asset
     * @param "MavenClassifier" (optional.String) -  Maven classifier of component&#x27;s asset
     * @param "NpmScope" (optional.String) -  npm scope
     * @param "NugetId" (optional.String) -  NuGet id
     * @param "NugetTags" (optional.String) -  NuGet tags
     * @param "P2PluginName" (optional.String) -  p2 plugin name
     * @param "PypiClassifiers" (optional.String) -  PyPI classifiers
     * @param "PypiDescription" (optional.String) -  PyPI description
     * @param "PypiKeywords" (optional.String) -  PyPI keywords
     * @param "PypiSummary" (optional.String) -  PyPI summary
     * @param "RubygemsDescription" (optional.String) -  RubyGems description
     * @param "RubygemsPlatform" (optional.String) -  RubyGems platform
     * @param "RubygemsSummary" (optional.String) -  RubyGems summary
     * @param "YumArchitecture" (optional.String) -  Yum architecture
@return PageComponentXo
*/

type SearchApiSearchOpts struct {
    ContinuationToken optional.String
    Sort optional.String
    Direction optional.String
    Timeout optional.Int32
    Q optional.String
    Repository optional.String
    Format optional.String
    Group optional.String
    Name optional.String
    Version optional.String
    Md5 optional.String
    Sha1 optional.String
    Sha256 optional.String
    Sha512 optional.String
    Prerelease optional.String
    ConanBaseVersion optional.String
    ConanChannel optional.String
    DockerImageName optional.String
    DockerImageTag optional.String
    DockerLayerId optional.String
    DockerContentDigest optional.String
    MavenGroupId optional.String
    MavenArtifactId optional.String
    MavenBaseVersion optional.String
    MavenExtension optional.String
    MavenClassifier optional.String
    NpmScope optional.String
    NugetId optional.String
    NugetTags optional.String
    P2PluginName optional.String
    PypiClassifiers optional.String
    PypiDescription optional.String
    PypiKeywords optional.String
    PypiSummary optional.String
    RubygemsDescription optional.String
    RubygemsPlatform optional.String
    RubygemsSummary optional.String
    YumArchitecture optional.String
}

func (a *SearchApiService) Search(ctx context.Context, localVarOptionals *SearchApiSearchOpts) (PageComponentXo, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue PageComponentXo
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v1/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.ContinuationToken.IsSet() {
		localVarQueryParams.Add("continuationToken", parameterToString(localVarOptionals.ContinuationToken.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sort.IsSet() {
		localVarQueryParams.Add("sort", parameterToString(localVarOptionals.Sort.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Direction.IsSet() {
		localVarQueryParams.Add("direction", parameterToString(localVarOptionals.Direction.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Timeout.IsSet() {
		localVarQueryParams.Add("timeout", parameterToString(localVarOptionals.Timeout.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Q.IsSet() {
		localVarQueryParams.Add("q", parameterToString(localVarOptionals.Q.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Repository.IsSet() {
		localVarQueryParams.Add("repository", parameterToString(localVarOptionals.Repository.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Format.IsSet() {
		localVarQueryParams.Add("format", parameterToString(localVarOptionals.Format.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Group.IsSet() {
		localVarQueryParams.Add("group", parameterToString(localVarOptionals.Group.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Version.IsSet() {
		localVarQueryParams.Add("version", parameterToString(localVarOptionals.Version.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Md5.IsSet() {
		localVarQueryParams.Add("md5", parameterToString(localVarOptionals.Md5.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sha1.IsSet() {
		localVarQueryParams.Add("sha1", parameterToString(localVarOptionals.Sha1.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sha256.IsSet() {
		localVarQueryParams.Add("sha256", parameterToString(localVarOptionals.Sha256.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sha512.IsSet() {
		localVarQueryParams.Add("sha512", parameterToString(localVarOptionals.Sha512.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Prerelease.IsSet() {
		localVarQueryParams.Add("prerelease", parameterToString(localVarOptionals.Prerelease.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ConanBaseVersion.IsSet() {
		localVarQueryParams.Add("conan.baseVersion", parameterToString(localVarOptionals.ConanBaseVersion.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ConanChannel.IsSet() {
		localVarQueryParams.Add("conan.channel", parameterToString(localVarOptionals.ConanChannel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DockerImageName.IsSet() {
		localVarQueryParams.Add("docker.imageName", parameterToString(localVarOptionals.DockerImageName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DockerImageTag.IsSet() {
		localVarQueryParams.Add("docker.imageTag", parameterToString(localVarOptionals.DockerImageTag.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DockerLayerId.IsSet() {
		localVarQueryParams.Add("docker.layerId", parameterToString(localVarOptionals.DockerLayerId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DockerContentDigest.IsSet() {
		localVarQueryParams.Add("docker.contentDigest", parameterToString(localVarOptionals.DockerContentDigest.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MavenGroupId.IsSet() {
		localVarQueryParams.Add("maven.groupId", parameterToString(localVarOptionals.MavenGroupId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MavenArtifactId.IsSet() {
		localVarQueryParams.Add("maven.artifactId", parameterToString(localVarOptionals.MavenArtifactId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MavenBaseVersion.IsSet() {
		localVarQueryParams.Add("maven.baseVersion", parameterToString(localVarOptionals.MavenBaseVersion.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MavenExtension.IsSet() {
		localVarQueryParams.Add("maven.extension", parameterToString(localVarOptionals.MavenExtension.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MavenClassifier.IsSet() {
		localVarQueryParams.Add("maven.classifier", parameterToString(localVarOptionals.MavenClassifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NpmScope.IsSet() {
		localVarQueryParams.Add("npm.scope", parameterToString(localVarOptionals.NpmScope.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NugetId.IsSet() {
		localVarQueryParams.Add("nuget.id", parameterToString(localVarOptionals.NugetId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NugetTags.IsSet() {
		localVarQueryParams.Add("nuget.tags", parameterToString(localVarOptionals.NugetTags.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.P2PluginName.IsSet() {
		localVarQueryParams.Add("p2.pluginName", parameterToString(localVarOptionals.P2PluginName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PypiClassifiers.IsSet() {
		localVarQueryParams.Add("pypi.classifiers", parameterToString(localVarOptionals.PypiClassifiers.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PypiDescription.IsSet() {
		localVarQueryParams.Add("pypi.description", parameterToString(localVarOptionals.PypiDescription.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PypiKeywords.IsSet() {
		localVarQueryParams.Add("pypi.keywords", parameterToString(localVarOptionals.PypiKeywords.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PypiSummary.IsSet() {
		localVarQueryParams.Add("pypi.summary", parameterToString(localVarOptionals.PypiSummary.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RubygemsDescription.IsSet() {
		localVarQueryParams.Add("rubygems.description", parameterToString(localVarOptionals.RubygemsDescription.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RubygemsPlatform.IsSet() {
		localVarQueryParams.Add("rubygems.platform", parameterToString(localVarOptionals.RubygemsPlatform.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RubygemsSummary.IsSet() {
		localVarQueryParams.Add("rubygems.summary", parameterToString(localVarOptionals.RubygemsSummary.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.YumArchitecture.IsSet() {
		localVarQueryParams.Add("yum.architecture", parameterToString(localVarOptionals.YumArchitecture.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v PageComponentXo
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
SearchApiService Search and download asset
Returns a 302 Found with location header field set to download URL. Unless a sort parameter is supplied, the search must return a single asset to receive download URL.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *SearchApiSearchAndDownloadAssetsOpts - Optional Parameters:
     * @param "Sort" (optional.String) -  The field to sort the results against, if left empty and more than 1 result is returned, the request will fail.
     * @param "Direction" (optional.String) -  The direction to sort records in, defaults to ascending (&#x27;asc&#x27;) for all sort fields, except version, which defaults to descending (&#x27;desc&#x27;)
     * @param "Timeout" (optional.Int32) -  How long to wait for search results in seconds. If this value is not provided, the system default timeout will be used.
     * @param "Q" (optional.String) -  Query by keyword
     * @param "Repository" (optional.String) -  Repository name
     * @param "Format" (optional.String) -  Query by format
     * @param "Group" (optional.String) -  Component group
     * @param "Name" (optional.String) -  Component name
     * @param "Version" (optional.String) -  Component version
     * @param "Md5" (optional.String) -  Specific MD5 hash of component&#x27;s asset
     * @param "Sha1" (optional.String) -  Specific SHA-1 hash of component&#x27;s asset
     * @param "Sha256" (optional.String) -  Specific SHA-256 hash of component&#x27;s asset
     * @param "Sha512" (optional.String) -  Specific SHA-512 hash of component&#x27;s asset
     * @param "Prerelease" (optional.String) -  Prerelease version flag
     * @param "ConanBaseVersion" (optional.String) -  baseVersion
     * @param "ConanChannel" (optional.String) -  channel
     * @param "DockerImageName" (optional.String) -  Docker image name
     * @param "DockerImageTag" (optional.String) -  Docker image tag
     * @param "DockerLayerId" (optional.String) -  Docker layer ID
     * @param "DockerContentDigest" (optional.String) -  Docker content digest
     * @param "MavenGroupId" (optional.String) -  Maven groupId
     * @param "MavenArtifactId" (optional.String) -  Maven artifactId
     * @param "MavenBaseVersion" (optional.String) -  Maven base version
     * @param "MavenExtension" (optional.String) -  Maven extension of component&#x27;s asset
     * @param "MavenClassifier" (optional.String) -  Maven classifier of component&#x27;s asset
     * @param "NpmScope" (optional.String) -  npm scope
     * @param "NugetId" (optional.String) -  NuGet id
     * @param "NugetTags" (optional.String) -  NuGet tags
     * @param "P2PluginName" (optional.String) -  p2 plugin name
     * @param "PypiClassifiers" (optional.String) -  PyPI classifiers
     * @param "PypiDescription" (optional.String) -  PyPI description
     * @param "PypiKeywords" (optional.String) -  PyPI keywords
     * @param "PypiSummary" (optional.String) -  PyPI summary
     * @param "RubygemsDescription" (optional.String) -  RubyGems description
     * @param "RubygemsPlatform" (optional.String) -  RubyGems platform
     * @param "RubygemsSummary" (optional.String) -  RubyGems summary
     * @param "YumArchitecture" (optional.String) -  Yum architecture

*/

type SearchApiSearchAndDownloadAssetsOpts struct {
    Sort optional.String
    Direction optional.String
    Timeout optional.Int32
    Q optional.String
    Repository optional.String
    Format optional.String
    Group optional.String
    Name optional.String
    Version optional.String
    Md5 optional.String
    Sha1 optional.String
    Sha256 optional.String
    Sha512 optional.String
    Prerelease optional.String
    ConanBaseVersion optional.String
    ConanChannel optional.String
    DockerImageName optional.String
    DockerImageTag optional.String
    DockerLayerId optional.String
    DockerContentDigest optional.String
    MavenGroupId optional.String
    MavenArtifactId optional.String
    MavenBaseVersion optional.String
    MavenExtension optional.String
    MavenClassifier optional.String
    NpmScope optional.String
    NugetId optional.String
    NugetTags optional.String
    P2PluginName optional.String
    PypiClassifiers optional.String
    PypiDescription optional.String
    PypiKeywords optional.String
    PypiSummary optional.String
    RubygemsDescription optional.String
    RubygemsPlatform optional.String
    RubygemsSummary optional.String
    YumArchitecture optional.String
}

func (a *SearchApiService) SearchAndDownloadAssets(ctx context.Context, localVarOptionals *SearchApiSearchAndDownloadAssetsOpts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v1/search/assets/download"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Sort.IsSet() {
		localVarQueryParams.Add("sort", parameterToString(localVarOptionals.Sort.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Direction.IsSet() {
		localVarQueryParams.Add("direction", parameterToString(localVarOptionals.Direction.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Timeout.IsSet() {
		localVarQueryParams.Add("timeout", parameterToString(localVarOptionals.Timeout.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Q.IsSet() {
		localVarQueryParams.Add("q", parameterToString(localVarOptionals.Q.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Repository.IsSet() {
		localVarQueryParams.Add("repository", parameterToString(localVarOptionals.Repository.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Format.IsSet() {
		localVarQueryParams.Add("format", parameterToString(localVarOptionals.Format.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Group.IsSet() {
		localVarQueryParams.Add("group", parameterToString(localVarOptionals.Group.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Version.IsSet() {
		localVarQueryParams.Add("version", parameterToString(localVarOptionals.Version.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Md5.IsSet() {
		localVarQueryParams.Add("md5", parameterToString(localVarOptionals.Md5.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sha1.IsSet() {
		localVarQueryParams.Add("sha1", parameterToString(localVarOptionals.Sha1.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sha256.IsSet() {
		localVarQueryParams.Add("sha256", parameterToString(localVarOptionals.Sha256.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sha512.IsSet() {
		localVarQueryParams.Add("sha512", parameterToString(localVarOptionals.Sha512.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Prerelease.IsSet() {
		localVarQueryParams.Add("prerelease", parameterToString(localVarOptionals.Prerelease.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ConanBaseVersion.IsSet() {
		localVarQueryParams.Add("conan.baseVersion", parameterToString(localVarOptionals.ConanBaseVersion.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ConanChannel.IsSet() {
		localVarQueryParams.Add("conan.channel", parameterToString(localVarOptionals.ConanChannel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DockerImageName.IsSet() {
		localVarQueryParams.Add("docker.imageName", parameterToString(localVarOptionals.DockerImageName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DockerImageTag.IsSet() {
		localVarQueryParams.Add("docker.imageTag", parameterToString(localVarOptionals.DockerImageTag.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DockerLayerId.IsSet() {
		localVarQueryParams.Add("docker.layerId", parameterToString(localVarOptionals.DockerLayerId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DockerContentDigest.IsSet() {
		localVarQueryParams.Add("docker.contentDigest", parameterToString(localVarOptionals.DockerContentDigest.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MavenGroupId.IsSet() {
		localVarQueryParams.Add("maven.groupId", parameterToString(localVarOptionals.MavenGroupId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MavenArtifactId.IsSet() {
		localVarQueryParams.Add("maven.artifactId", parameterToString(localVarOptionals.MavenArtifactId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MavenBaseVersion.IsSet() {
		localVarQueryParams.Add("maven.baseVersion", parameterToString(localVarOptionals.MavenBaseVersion.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MavenExtension.IsSet() {
		localVarQueryParams.Add("maven.extension", parameterToString(localVarOptionals.MavenExtension.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MavenClassifier.IsSet() {
		localVarQueryParams.Add("maven.classifier", parameterToString(localVarOptionals.MavenClassifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NpmScope.IsSet() {
		localVarQueryParams.Add("npm.scope", parameterToString(localVarOptionals.NpmScope.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NugetId.IsSet() {
		localVarQueryParams.Add("nuget.id", parameterToString(localVarOptionals.NugetId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NugetTags.IsSet() {
		localVarQueryParams.Add("nuget.tags", parameterToString(localVarOptionals.NugetTags.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.P2PluginName.IsSet() {
		localVarQueryParams.Add("p2.pluginName", parameterToString(localVarOptionals.P2PluginName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PypiClassifiers.IsSet() {
		localVarQueryParams.Add("pypi.classifiers", parameterToString(localVarOptionals.PypiClassifiers.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PypiDescription.IsSet() {
		localVarQueryParams.Add("pypi.description", parameterToString(localVarOptionals.PypiDescription.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PypiKeywords.IsSet() {
		localVarQueryParams.Add("pypi.keywords", parameterToString(localVarOptionals.PypiKeywords.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PypiSummary.IsSet() {
		localVarQueryParams.Add("pypi.summary", parameterToString(localVarOptionals.PypiSummary.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RubygemsDescription.IsSet() {
		localVarQueryParams.Add("rubygems.description", parameterToString(localVarOptionals.RubygemsDescription.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RubygemsPlatform.IsSet() {
		localVarQueryParams.Add("rubygems.platform", parameterToString(localVarOptionals.RubygemsPlatform.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RubygemsSummary.IsSet() {
		localVarQueryParams.Add("rubygems.summary", parameterToString(localVarOptionals.RubygemsSummary.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.YumArchitecture.IsSet() {
		localVarQueryParams.Add("yum.architecture", parameterToString(localVarOptionals.YumArchitecture.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}


	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}
/*
SearchApiService Search assets
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *SearchApiSearchAssetsOpts - Optional Parameters:
     * @param "ContinuationToken" (optional.String) -  A token returned by a prior request. If present, the next page of results are returned
     * @param "Sort" (optional.String) -  The field to sort the results against, if left empty, a sort based on match weight will be used.
     * @param "Direction" (optional.String) -  The direction to sort records in, defaults to ascending (&#x27;asc&#x27;) for all sort fields, except version, which defaults to descending (&#x27;desc&#x27;)
     * @param "Timeout" (optional.Int32) -  How long to wait for search results in seconds. If this value is not provided, the system default timeout will be used.
     * @param "Q" (optional.String) -  Query by keyword
     * @param "Repository" (optional.String) -  Repository name
     * @param "Format" (optional.String) -  Query by format
     * @param "Group" (optional.String) -  Component group
     * @param "Name" (optional.String) -  Component name
     * @param "Version" (optional.String) -  Component version
     * @param "Md5" (optional.String) -  Specific MD5 hash of component&#x27;s asset
     * @param "Sha1" (optional.String) -  Specific SHA-1 hash of component&#x27;s asset
     * @param "Sha256" (optional.String) -  Specific SHA-256 hash of component&#x27;s asset
     * @param "Sha512" (optional.String) -  Specific SHA-512 hash of component&#x27;s asset
     * @param "Prerelease" (optional.String) -  Prerelease version flag
     * @param "ConanBaseVersion" (optional.String) -  baseVersion
     * @param "ConanChannel" (optional.String) -  channel
     * @param "DockerImageName" (optional.String) -  Docker image name
     * @param "DockerImageTag" (optional.String) -  Docker image tag
     * @param "DockerLayerId" (optional.String) -  Docker layer ID
     * @param "DockerContentDigest" (optional.String) -  Docker content digest
     * @param "MavenGroupId" (optional.String) -  Maven groupId
     * @param "MavenArtifactId" (optional.String) -  Maven artifactId
     * @param "MavenBaseVersion" (optional.String) -  Maven base version
     * @param "MavenExtension" (optional.String) -  Maven extension of component&#x27;s asset
     * @param "MavenClassifier" (optional.String) -  Maven classifier of component&#x27;s asset
     * @param "NpmScope" (optional.String) -  npm scope
     * @param "NugetId" (optional.String) -  NuGet id
     * @param "NugetTags" (optional.String) -  NuGet tags
     * @param "P2PluginName" (optional.String) -  p2 plugin name
     * @param "PypiClassifiers" (optional.String) -  PyPI classifiers
     * @param "PypiDescription" (optional.String) -  PyPI description
     * @param "PypiKeywords" (optional.String) -  PyPI keywords
     * @param "PypiSummary" (optional.String) -  PyPI summary
     * @param "RubygemsDescription" (optional.String) -  RubyGems description
     * @param "RubygemsPlatform" (optional.String) -  RubyGems platform
     * @param "RubygemsSummary" (optional.String) -  RubyGems summary
     * @param "YumArchitecture" (optional.String) -  Yum architecture
@return PageAssetXo
*/

type SearchApiSearchAssetsOpts struct {
    ContinuationToken optional.String
    Sort optional.String
    Direction optional.String
    Timeout optional.Int32
    Q optional.String
    Repository optional.String
    Format optional.String
    Group optional.String
    Name optional.String
    Version optional.String
    Md5 optional.String
    Sha1 optional.String
    Sha256 optional.String
    Sha512 optional.String
    Prerelease optional.String
    ConanBaseVersion optional.String
    ConanChannel optional.String
    DockerImageName optional.String
    DockerImageTag optional.String
    DockerLayerId optional.String
    DockerContentDigest optional.String
    MavenGroupId optional.String
    MavenArtifactId optional.String
    MavenBaseVersion optional.String
    MavenExtension optional.String
    MavenClassifier optional.String
    NpmScope optional.String
    NugetId optional.String
    NugetTags optional.String
    P2PluginName optional.String
    PypiClassifiers optional.String
    PypiDescription optional.String
    PypiKeywords optional.String
    PypiSummary optional.String
    RubygemsDescription optional.String
    RubygemsPlatform optional.String
    RubygemsSummary optional.String
    YumArchitecture optional.String
}

func (a *SearchApiService) SearchAssets(ctx context.Context, localVarOptionals *SearchApiSearchAssetsOpts) (PageAssetXo, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue PageAssetXo
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v1/search/assets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.ContinuationToken.IsSet() {
		localVarQueryParams.Add("continuationToken", parameterToString(localVarOptionals.ContinuationToken.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sort.IsSet() {
		localVarQueryParams.Add("sort", parameterToString(localVarOptionals.Sort.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Direction.IsSet() {
		localVarQueryParams.Add("direction", parameterToString(localVarOptionals.Direction.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Timeout.IsSet() {
		localVarQueryParams.Add("timeout", parameterToString(localVarOptionals.Timeout.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Q.IsSet() {
		localVarQueryParams.Add("q", parameterToString(localVarOptionals.Q.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Repository.IsSet() {
		localVarQueryParams.Add("repository", parameterToString(localVarOptionals.Repository.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Format.IsSet() {
		localVarQueryParams.Add("format", parameterToString(localVarOptionals.Format.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Group.IsSet() {
		localVarQueryParams.Add("group", parameterToString(localVarOptionals.Group.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Version.IsSet() {
		localVarQueryParams.Add("version", parameterToString(localVarOptionals.Version.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Md5.IsSet() {
		localVarQueryParams.Add("md5", parameterToString(localVarOptionals.Md5.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sha1.IsSet() {
		localVarQueryParams.Add("sha1", parameterToString(localVarOptionals.Sha1.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sha256.IsSet() {
		localVarQueryParams.Add("sha256", parameterToString(localVarOptionals.Sha256.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sha512.IsSet() {
		localVarQueryParams.Add("sha512", parameterToString(localVarOptionals.Sha512.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Prerelease.IsSet() {
		localVarQueryParams.Add("prerelease", parameterToString(localVarOptionals.Prerelease.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ConanBaseVersion.IsSet() {
		localVarQueryParams.Add("conan.baseVersion", parameterToString(localVarOptionals.ConanBaseVersion.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ConanChannel.IsSet() {
		localVarQueryParams.Add("conan.channel", parameterToString(localVarOptionals.ConanChannel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DockerImageName.IsSet() {
		localVarQueryParams.Add("docker.imageName", parameterToString(localVarOptionals.DockerImageName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DockerImageTag.IsSet() {
		localVarQueryParams.Add("docker.imageTag", parameterToString(localVarOptionals.DockerImageTag.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DockerLayerId.IsSet() {
		localVarQueryParams.Add("docker.layerId", parameterToString(localVarOptionals.DockerLayerId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DockerContentDigest.IsSet() {
		localVarQueryParams.Add("docker.contentDigest", parameterToString(localVarOptionals.DockerContentDigest.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MavenGroupId.IsSet() {
		localVarQueryParams.Add("maven.groupId", parameterToString(localVarOptionals.MavenGroupId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MavenArtifactId.IsSet() {
		localVarQueryParams.Add("maven.artifactId", parameterToString(localVarOptionals.MavenArtifactId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MavenBaseVersion.IsSet() {
		localVarQueryParams.Add("maven.baseVersion", parameterToString(localVarOptionals.MavenBaseVersion.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MavenExtension.IsSet() {
		localVarQueryParams.Add("maven.extension", parameterToString(localVarOptionals.MavenExtension.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MavenClassifier.IsSet() {
		localVarQueryParams.Add("maven.classifier", parameterToString(localVarOptionals.MavenClassifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NpmScope.IsSet() {
		localVarQueryParams.Add("npm.scope", parameterToString(localVarOptionals.NpmScope.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NugetId.IsSet() {
		localVarQueryParams.Add("nuget.id", parameterToString(localVarOptionals.NugetId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NugetTags.IsSet() {
		localVarQueryParams.Add("nuget.tags", parameterToString(localVarOptionals.NugetTags.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.P2PluginName.IsSet() {
		localVarQueryParams.Add("p2.pluginName", parameterToString(localVarOptionals.P2PluginName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PypiClassifiers.IsSet() {
		localVarQueryParams.Add("pypi.classifiers", parameterToString(localVarOptionals.PypiClassifiers.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PypiDescription.IsSet() {
		localVarQueryParams.Add("pypi.description", parameterToString(localVarOptionals.PypiDescription.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PypiKeywords.IsSet() {
		localVarQueryParams.Add("pypi.keywords", parameterToString(localVarOptionals.PypiKeywords.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PypiSummary.IsSet() {
		localVarQueryParams.Add("pypi.summary", parameterToString(localVarOptionals.PypiSummary.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RubygemsDescription.IsSet() {
		localVarQueryParams.Add("rubygems.description", parameterToString(localVarOptionals.RubygemsDescription.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RubygemsPlatform.IsSet() {
		localVarQueryParams.Add("rubygems.platform", parameterToString(localVarOptionals.RubygemsPlatform.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RubygemsSummary.IsSet() {
		localVarQueryParams.Add("rubygems.summary", parameterToString(localVarOptionals.RubygemsSummary.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.YumArchitecture.IsSet() {
		localVarQueryParams.Add("yum.architecture", parameterToString(localVarOptionals.YumArchitecture.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v PageAssetXo
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
